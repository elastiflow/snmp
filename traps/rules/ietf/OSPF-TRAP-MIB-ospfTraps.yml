- mapping: |-
    #!blobl
    root = this
    root.out.origin.agent.name = "IETF OSPF-TRAP-MIB"
- switch:
  - check: this.trap.SpecificTrap == 1
    # ospfVirtIfStateChange
    #
    # An ospfVirtIfStateChange trap signifies that there has been a change in the state of an OSPF virtual interface.
    # This trap should be generated when the interface state regresses (e.g., goes from Point-to-Point to Down) or
    # progresses to a terminal state (i.e., Point-to-Point).
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfVirtIfAreaId (IpAddress) - The transit area that the virtual link traverses. By definition, this is not
    #   0.0.0.0.
    # ospfVirtIfNeighbor (IpAddress) - The Router ID of the virtual neighbor.
    # ospfVirtIfState (INTEGER) - OSPF virtual interface states.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 3 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.9.1.1") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.9.1.2") {
            if this.trap.VarBinds.index(3).OID.has_prefix(".1.3.6.1.2.1.14.9.1.7") {
              meta varbinds_ok = true
          }}}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                meta ospfVirtIfState = this.trap.VarBinds.index(3).Value

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfVirtIfAreaId = this.trap.VarBinds.index(1).Value
                if root.out.ietf.ospfVirtIfAreaId.type() == "number" {
                  root.out.ietf.ospfVirtIfAreaId = root.out.ietf.ospfVirtIfAreaId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfVirtIfNeighbor = this.trap.VarBinds.index(2).Value
                if root.out.ietf.ospfVirtIfNeighbor.type() == "number" {
                  root.out.ietf.ospfVirtIfNeighbor = root.out.ietf.ospfVirtIfNeighbor.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfVirtIfState = this.trap.VarBinds.index(3).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.9.1.7")

                root.out.object.name = "OSPF-TRAP-MIB::ospfVirtIfEntry"
                root.out.object.index = root.out.ietf.ospfVirtIfAreaId + "." + root.out.ietf.ospfVirtIfNeighbor
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId + ", area: " + root.out.ietf.ospfVirtIfAreaId + ", neighbor: " + root.out.ietf.ospfVirtIfNeighbor

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfStateChange"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfStateChange"
                root.out.event.category.name = "OSPF virtual interface state"

            - switch:
              - check: metadata("ospfVirtIfState") == 1
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-down"
                      root.out.event.message = "OSPF virtual interface down"
                      root.out.event.severity.code = 3
                      root.out.event.severity.level = "Error"

              - check: metadata("ospfVirtIfState") == 4
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-pointToPoint"
                      root.out.event.message = "OSPF virtual interface point-to-point"
                      root.out.event.severity.code = 6
                      root.out.event.severity.level = "Informational"

              - processors:
                - mapping: |-
                    #!blobl
                    root = this

                    root.out.event.id = root.out.event.id + "-unknown"
                    root.out.event.message = "OSPF virtual interface state unknown"
                    root.out.event.severity.code = 4
                    root.out.event.severity.level = "Warning"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              if this.trap.VarBinds.length() > 6 {
                root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
                root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
                }
              }}}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfStateChange"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfStateChange-unknown"
              root.out.event.category.name = "OSPF virtual interface state"
              root.out.event.message = "OSPF virtual interface state changed - UNEXPECTED VARBINDS for ospfVirtIfStateChange trap!"
              root.out.event.severity.code = 4
              root.out.event.severity.level = "Warning"

  - check: this.trap.SpecificTrap == 2
    # ospfNbrStateChange
    #
    # An ospfNbrStateChange trap signifies that there has been a change in the state of a non-virtual OSPF neighbor.
    # This trap should be generated when the neighbor state regresses (e.g., goes from Attempt or Full to 1-Way or
    # Down) or progresses to a terminal state (e.g., 2-Way or Full). When an neighbor transitions from or to Full on
    # non-broadcast multi-access and broadcast networks, the trap should be generated by the designated router. A
    # designated router transitioning to Down will be noted by ospfIfStateChange.
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfNbrIpAddr (IpAddress) - The IP address this neighbor is using in its IP source address. Note that, on
    #   addressless links, this will not be 0.0.0.0 but the address of another of the neighbor's interfaces.
    # ospfNbrAddressLessIndex (Integer32) - On an interface having an IP address, zero. On addressless interfaces, the
    #   corresponding value of ifIndex in the Internet Standard MIB. On row creation, this can be derived from the
    #   instance.
    # ospfNbrRtrId (IpAddress) - A 32-bit integer (represented as a type IpAddress) uniquely identifying the
    #   neighboring router in the Autonomous System.
    # ospfNbrState (INTEGER) - The state of the relationship with this neighbor.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 4 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.10.1.1") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.10.1.2") {
            if this.trap.VarBinds.index(3).OID.has_prefix(".1.3.6.1.2.1.14.10.1.3") {
            if this.trap.VarBinds.index(4).OID.has_prefix(".1.3.6.1.2.1.14.10.1.6") {
              meta varbinds_ok = true
          }}}}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                meta ospfNbrState = this.trap.VarBinds.index(4).Value.catch(0)

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfNbrIpAddr = this.trap.VarBinds.index(1).Value
                if root.out.ietf.ospfNbrIpAddr.type() == "number" {
                  root.out.ietf.ospfNbrIpAddr = root.out.ietf.ospfNbrIpAddr.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfNbrAddressLessIndex = this.trap.VarBinds.index(2).Value
                root.out.ietf.ospfNbrRtrId = this.trap.VarBinds.index(3).Value
                if root.out.ietf.ospfNbrRtrId.type() == "number" {
                  root.out.ietf.ospfNbrRtrId = root.out.ietf.ospfNbrRtrId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfNbrState = this.trap.VarBinds.index(4).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.10.1.6")

                let interfaceIndex = if root.out.ietf.ospfNbrAddressLessIndex > 0 {
                  "ifEntry." + root.out.ietf.ospfNbrAddressLessIndex.string()
                } else {
                  root.out.ietf.ospfNbrIpAddr
                }
                
                root.out.object.name = "OSPF-TRAP-MIB::ospfNbrEntry"
                root.out.object.index = root.out.ietf.ospfNbrIpAddr + "." + root.out.ietf.ospfNbrAddressLessIndex.string()
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId + ", neighbor: " + root.out.ietf.ospfNbrRtrId + ", neighbor interface: " + $interfaceIndex

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfNbrStateChange"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfNbrStateChange"
                root.out.event.category.name = "OSPF neighbor state"

            - switch:
              - check: metadata("ospfNbrState") == 1
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-down"
                      root.out.event.message = "OSPF neighbor down"
                      root.out.event.severity.code = 3
                      root.out.event.severity.level = "Error"

              - check: metadata("ospfNbrState") == 2
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-attempt"
                      root.out.event.message = "OSPF neighbor attempt"
                      root.out.event.severity.code = 4
                      root.out.event.severity.level = "Warning"

              - check: metadata("ospfNbrState") == 3
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-init"
                      root.out.event.message = "OSPF neighbor initializing"
                      root.out.event.severity.code = 5
                      root.out.event.severity.level = "Notice"

              - check: metadata("ospfNbrState") == 4
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-twoWay"
                      root.out.event.message = "OSPF neighbor two-way"
                      root.out.event.severity.code = 5
                      root.out.event.severity.level = "Notice"

              - check: metadata("ospfNbrState") == 5
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-exchangeStart"
                      root.out.event.message = "OSPF neighbor exchange start"
                      root.out.event.severity.code = 5
                      root.out.event.severity.level = "Notice"

              - check: metadata("ospfNbrState") == 6
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-exchange"
                      root.out.event.message = "OSPF neighbor exchange"
                      root.out.event.severity.code = 5
                      root.out.event.severity.level = "Notice"

              - check: metadata("ospfNbrState") == 7
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-loading"
                      root.out.event.message = "OSPF neighbor loading"
                      root.out.event.severity.code = 5
                      root.out.event.severity.level = "Notice"

              - check: metadata("ospfNbrState") == 8
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-full"
                      root.out.event.message = "OSPF neighbor full"
                      root.out.event.severity.code = 6
                      root.out.event.severity.level = "Informational"

              - processors:
                - mapping: |-
                    #!blobl
                    root = this

                    root.out.event.id = root.out.event.id + "-unknown"
                    root.out.event.message = "OSPF neighbor state unknown"
                    root.out.event.severity.code = 4
                    root.out.event.severity.level = "Warning"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              if this.trap.VarBinds.length() > 6 {
                root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
                root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
                }
              if this.trap.VarBinds.length() > 7 {
                root.out.snmptrap.varbind.oid_7 = this.trap.VarBinds.index(7).OID
                root.out.snmptrap.varbind.type_7 = this.trap.VarBinds.index(7).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(7).Type == 4 || this.trap.VarBinds.index(7).Type == 68 {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.string()
                }
              }}}}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfNbrStateChange"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfNbrStateChange-unknown"
              root.out.event.category.name = "OSPF neighbor state"
              root.out.event.message = "OSPF neighbor state changed - UNEXPECTED VARBINDS for ospfNbrStateChange trap!"
              root.out.event.severity.code = 4
              root.out.event.severity.level = "Warning"

  - check: this.trap.SpecificTrap == 3
    # ospfVirtNbrStateChange
    #
    # An ospfVirtNbrStateChange trap signifies that there has been a change in the state of an OSPF virtual neighbor.
    # This trap should be generated when the neighbor state regresses (e.g., goes from Attempt or Full to 1-Way or
    # Down) or progresses to a terminal state (e.g., Full).
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfVirtNbrArea (IpAddress) - The Transit Area Identifier.
    # ospfVirtNbrRtrId (IpAddress) - A 32-bit integer uniquely identifying the neighboring router in the Autonomous
    #   System.
    # ospfVirtNbrState (INTEGER) - The state of the virtual neighbor relationship.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 3 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.11.1.1") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.11.1.2") {
            if this.trap.VarBinds.index(3).OID.has_prefix(".1.3.6.1.2.1.14.11.1.5") {
              meta varbinds_ok = true
          }}}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                meta ospfVirtNbrState = this.trap.VarBinds.index(3).Value.catch(0)

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfVirtNbrArea = this.trap.VarBinds.index(1).Value
                if root.out.ietf.ospfVirtNbrArea.type() == "number" {
                  root.out.ietf.ospfVirtNbrArea = root.out.ietf.ospfVirtNbrArea.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfVirtNbrRtrId = this.trap.VarBinds.index(2).Value
                if root.out.ietf.ospfVirtNbrRtrId.type() == "number" {
                  root.out.ietf.ospfVirtNbrRtrId = root.out.ietf.ospfVirtNbrRtrId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfVirtNbrState = this.trap.VarBinds.index(3).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.11.1.5")

                root.out.object.name = "OSPF-TRAP-MIB::ospfVirtNbrEntry"
                root.out.object.index = root.out.ietf.ospfVirtNbrArea + "." + root.out.ietf.ospfVirtNbrRtrId
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId + ", area: " + root.out.ietf.ospfVirtNbrArea + ", neighbor: " + root.out.ietf.ospfVirtNbrRtrId

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtNbrStateChange"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtNbrStateChange"
                root.out.event.category.name = "OSPF virtual neighbor state"

            - switch:
              - check: metadata("ospfVirtNbrState") == 1
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-down"
                      root.out.event.message = "OSPF virtual neighbor down"
                      root.out.event.severity.code = 3
                      root.out.event.severity.level = "Error"

              - check: metadata("ospfVirtNbrState") == 2
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-attempt"
                      root.out.event.message = "OSPF virtual neighbor attempt"
                      root.out.event.severity.code = 4
                      root.out.event.severity.level = "Warning"

              - check: metadata("ospfVirtNbrState") == 3
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-init"
                      root.out.event.message = "OSPF virtual neighbor initializing"
                      root.out.event.severity.code = 5
                      root.out.event.severity.level = "Notice"

              - check: metadata("ospfVirtNbrState") == 4
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-twoWay"
                      root.out.event.message = "OSPF virtual neighbor two-way"
                      root.out.event.severity.code = 5
                      root.out.event.severity.level = "Notice"

              - check: metadata("ospfVirtNbrState") == 5
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-exchangeStart"
                      root.out.event.message = "OSPF virtual neighbor exchange start"
                      root.out.event.severity.code = 5
                      root.out.event.severity.level = "Notice"

              - check: metadata("ospfVirtNbrState") == 6
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-exchange"
                      root.out.event.message = "OSPF virtual neighbor exchange"
                      root.out.event.severity.code = 5
                      root.out.event.severity.level = "Notice"

              - check: metadata("ospfVirtNbrState") == 7
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-loading"
                      root.out.event.message = "OSPF virtual neighbor loading"
                      root.out.event.severity.code = 5
                      root.out.event.severity.level = "Notice"

              - check: metadata("ospfVirtNbrState") == 8
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-full"
                      root.out.event.message = "OSPF virtual neighbor full"
                      root.out.event.severity.code = 6
                      root.out.event.severity.level = "Informational"

              - processors:
                - mapping: |-
                    #!blobl
                    root = this

                    root.out.event.id = root.out.event.id + "-unknown"
                    root.out.event.message = "OSPF virtual neighbor state unknown"
                    root.out.event.severity.code = 4
                    root.out.event.severity.level = "Warning"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              if this.trap.VarBinds.length() > 6 {
                root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
                root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
                }
              }}}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtNbrStateChange"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtNbrStateChange-unknown"
              root.out.event.category.name = "OSPF virtual neighbor state"
              root.out.event.message = "OSPF virtual neighbor state changed - UNEXPECTED VARBINDS for ospfVirtNbrStateChange trap!"
              root.out.event.severity.code = 4
              root.out.event.severity.level = "Warning"

  - check: this.trap.SpecificTrap == 4
    # ospfIfConfigError
    #
    # An ospfIfConfigError trap signifies that a packet has been received on a non-virtual interface from a router
    # whose configuration parameters conflict with this router's configuration parameters. Note that the event
    # optionMismatch should cause a trap only if it prevents an adjacency from forming.
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfIfIpAddress (IpAddress) - The IP address of this OSPF interface.
    # ospfAddressLessIf (Integer32) - For the purpose of easing the instancing of addressed and addressless
    #   interfaces; this variable takes the value 0 on interfaces with IP addresses and the corresponding value of
    #   ifIndex for interfaces having no IP address.
    # ospfPacketSrc (IpAddress) - The IP address of an inbound packet that cannot be identified by a neighbor
    #   instance. When the last value of a trap using this object is needed, but no traps of that type have been sent,
    #   this value pertaining to this object should be returned as 0.0.0.0.
    # ospfConfigErrorType (INTEGER) - Potential types of configuration conflicts. Used by the ospfConfigError and
    #   ospfConfigVirtError traps. When the last value of a trap using this object is needed, but no traps of that
    #   type have been sent, this value pertaining to this object should be returned as noError.
    # ospfPacketType (INTEGER) - OSPF packet types. When the last value of a trap using this object is needed, but no
    #   traps of that type have been sent, this value pertaining to this object should be returned as nullPacket.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 5 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.7.1.1") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.7.1.2") {
            if this.trap.VarBinds.index(3).OID.has_prefix(".1.3.6.1.2.1.14.16.1.4") {
            if this.trap.VarBinds.index(4).OID.has_prefix(".1.3.6.1.2.1.14.16.1.2") {
            if this.trap.VarBinds.index(5).OID.has_prefix(".1.3.6.1.2.1.14.16.1.3") {
              meta varbinds_ok = true
          }}}}}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfIfIpAddress = this.trap.VarBinds.index(1).Value
                if root.out.ietf.ospfIfIpAddress.type() == "number" {
                  root.out.ietf.ospfIfIpAddress = root.out.ietf.ospfIfIpAddress.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfAddressLessIf = this.trap.VarBinds.index(2).Value
                root.out.ietf.ospfPacketSrc = this.trap.VarBinds.index(3).Value
                if root.out.ietf.ospfPacketSrc.type() == "number" {
                  root.out.ietf.ospfPacketSrc = root.out.ietf.ospfPacketSrc.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfConfigErrorType = this.trap.VarBinds.index(4).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.16.1.2")
                let ospfConfigErrorTypeDef = this.trap.VarBinds.index(4).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.16.1.2_definition")
                root.out.ietf.ospfPacketType = this.trap.VarBinds.index(5).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.16.1.3")
                let ospfPacketTypeDef = this.trap.VarBinds.index(5).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.16.1.3_definition")

                let interfaceIndex = if root.out.ietf.ospfAddressLessIf > 0 {
                  "ifEntry." + root.out.ietf.ospfAddressLessIf.string()
                } else {
                  root.out.ietf.ospfIfIpAddress
                }
                
                root.out.object.name = "OSPF-TRAP-MIB::ospfIfEntry"
                root.out.object.index = root.out.ietf.ospfIfIpAddress + "." + root.out.ietf.ospfAddressLessIf.string()
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId + ", interface: " + $interfaceIndex + ", packet source: " + root.out.ietf.ospfPacketSrc

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfIfConfigError"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfIfConfigError-" + $ospfPacketTypeDef + "-" + $ospfConfigErrorTypeDef
                root.out.event.category.name = "OSPF interface configuration state"
                root.out.event.message = "OSPF interface ingress " + root.out.ietf.ospfPacketType + " packet configuration error: " + root.out.ietf.ospfConfigErrorType
                root.out.event.severity.code = 3
                root.out.event.severity.level = "Error"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              if this.trap.VarBinds.length() > 6 {
                root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
                root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
                }
              if this.trap.VarBinds.length() > 7 {
                root.out.snmptrap.varbind.oid_7 = this.trap.VarBinds.index(7).OID
                root.out.snmptrap.varbind.type_7 = this.trap.VarBinds.index(7).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(7).Type == 4 || this.trap.VarBinds.index(7).Type == 68 {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.string()
                }
              if this.trap.VarBinds.length() > 8 {
                root.out.snmptrap.varbind.oid_8 = this.trap.VarBinds.index(8).OID
                root.out.snmptrap.varbind.type_8 = this.trap.VarBinds.index(8).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(8).Type == 4 || this.trap.VarBinds.index(8).Type == 68 {
                  root.out.snmptrap.varbind.value_8 = this.trap.VarBinds.index(8).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_8 = this.trap.VarBinds.index(8).Value.string()
                }
              }}}}}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfIfConfigError"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfIfConfigError-unknown"
              root.out.event.category.name = "OSPF interface configuration state"
              root.out.event.message = "OSPF interface ingress packet configuration error - UNEXPECTED VARBINDS for ospfIfConfigError trap!"
              root.out.event.severity.code = 3
              root.out.event.severity.level = "Error"

  - check: this.trap.SpecificTrap == 5
    # ospfVirtIfConfigError
    #
    # An ospfVirtIfConfigError trap signifies that a packet has been received on a virtual interface from a router
    # whose configuration parameters conflict with this router's configuration parameters. Note that the event
    # optionMismatch should cause a trap only if it prevents an adjacency from forming.
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfVirtIfAreaId (IpAddress) - The transit area that the virtual link traverses. By definition, this is not
    #   0.0.0.0.
    # ospfVirtIfNeighbor (IpAddress) - The Router ID of the virtual neighbor.
    # ospfConfigErrorType (INTEGER) - Potential types of configuration conflicts. Used by the ospfConfigError and
    #   ospfConfigVirtError traps. When the last value of a trap using this object is needed, but no traps of that
    #   type have been sent, this value pertaining to this object should be returned as noError.
    # ospfPacketType (INTEGER) - OSPF packet types. When the last value of a trap using this object is needed, but no
    #   traps of that type have been sent, this value pertaining to this object should be returned as nullPacket.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 4 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.9.1.1") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.9.1.2") {
            if this.trap.VarBinds.index(3).OID.has_prefix(".1.3.6.1.2.1.14.16.1.2") {
            if this.trap.VarBinds.index(4).OID.has_prefix(".1.3.6.1.2.1.14.16.1.3") {
              meta varbinds_ok = true
          }}}}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfVirtIfAreaId = this.trap.VarBinds.index(1).Value
                if root.out.ietf.ospfVirtIfAreaId.type() == "number" {
                  root.out.ietf.ospfVirtIfAreaId = root.out.ietf.ospfVirtIfAreaId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfVirtIfNeighbor = this.trap.VarBinds.index(2).Value
                if root.out.ietf.ospfVirtIfNeighbor.type() == "number" {
                  root.out.ietf.ospfVirtIfNeighbor = root.out.ietf.ospfVirtIfNeighbor.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfConfigErrorType = this.trap.VarBinds.index(3).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.16.1.2")
                let ospfConfigErrorTypeDef = this.trap.VarBinds.index(3).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.16.1.2_definition")
                root.out.ietf.ospfPacketType = this.trap.VarBinds.index(4).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.16.1.3")
                let ospfPacketTypeDef = this.trap.VarBinds.index(4).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.16.1.3_definition")

                root.out.object.name = "OSPF-TRAP-MIB::ospfVirtIfEntry"
                root.out.object.index = root.out.ietf.ospfVirtIfAreaId + "." + root.out.ietf.ospfVirtIfNeighbor
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId + ", area: " + root.out.ietf.ospfVirtIfAreaId + ", neighbor: " + root.out.ietf.ospfVirtIfNeighbor

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfConfigError"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfConfigError-" + $ospfPacketTypeDef + "-" + $ospfConfigErrorTypeDef
                root.out.event.category.name = "OSPF virtual interface configuration state"
                root.out.event.message = "OSPF virtual interface ingress " + root.out.ietf.ospfPacketType + " packet configuration error: " + root.out.ietf.ospfConfigErrorType
                root.out.event.severity.code = 3
                root.out.event.severity.level = "Error"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              if this.trap.VarBinds.length() > 6 {
                root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
                root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
                }
              if this.trap.VarBinds.length() > 7 {
                root.out.snmptrap.varbind.oid_7 = this.trap.VarBinds.index(7).OID
                root.out.snmptrap.varbind.type_7 = this.trap.VarBinds.index(7).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(7).Type == 4 || this.trap.VarBinds.index(7).Type == 68 {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.string()
                }
              }}}}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfConfigError"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfConfigError-unknown"
              root.out.event.category.name = "OSPF virtual interface configuration state"
              root.out.event.message = "OSPF virtual interface ingress packet configuration error - UNEXPECTED VARBINDS for ospfVirtIfConfigError trap!"
              root.out.event.severity.code = 3
              root.out.event.severity.level = "Error"

  - check: this.trap.SpecificTrap == 6
    # ospfIfAuthFailure
    #
    # An ospfIfAuthFailure trap signifies that a packet has been received on a non-virtual interface from a router
    # whose authentication key or authentication type conflicts with this router's authentication key or
    # authentication type.
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfIfIpAddress (IpAddress) - The IP address of this OSPF interface.
    # ospfAddressLessIf (Integer32) - For the purpose of easing the instancing of addressed and addressless
    #   interfaces; this variable takes the value 0 on interfaces with IP addresses and the corresponding value of
    #   ifIndex for interfaces having no IP address.
    # ospfPacketSrc (IpAddress) - The IP address of an inbound packet that cannot be identified by a neighbor
    #   instance. When the last value of a trap using this object is needed, but no traps of that type have been sent,
    #   this value pertaining to this object should be returned as 0.0.0.0.
    # ospfConfigErrorType (INTEGER) - Potential types of configuration conflicts. Used by the ospfConfigError and
    #   ospfConfigVirtError traps. When the last value of a trap using this object is needed, but no traps of that
    #   type have been sent, this value pertaining to this object should be returned as noError.
    # ospfPacketType (INTEGER) - OSPF packet types. When the last value of a trap using this object is needed, but no
    #   traps of that type have been sent, this value pertaining to this object should be returned as nullPacket.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 5 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.7.1.1") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.7.1.2") {
            if this.trap.VarBinds.index(3).OID.has_prefix(".1.3.6.1.2.1.14.16.1.4") {
            if this.trap.VarBinds.index(4).OID.has_prefix(".1.3.6.1.2.1.14.16.1.2") {
            if this.trap.VarBinds.index(5).OID.has_prefix(".1.3.6.1.2.1.14.16.1.3") {
              meta varbinds_ok = true
          }}}}}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                meta ospfConfigErrorType = this.trap.VarBinds.index(4).Value.catch(0)

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfIfIpAddress = this.trap.VarBinds.index(1).Value
                if root.out.ietf.ospfIfIpAddress.type() == "number" {
                  root.out.ietf.ospfIfIpAddress = root.out.ietf.ospfIfIpAddress.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfAddressLessIf = this.trap.VarBinds.index(2).Value
                root.out.ietf.ospfPacketSrc = this.trap.VarBinds.index(3).Value
                if root.out.ietf.ospfPacketSrc.type() == "number" {
                  root.out.ietf.ospfPacketSrc = root.out.ietf.ospfPacketSrc.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfConfigErrorType = this.trap.VarBinds.index(4).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.16.1.2")
                root.out.ietf.ospfPacketType = this.trap.VarBinds.index(5).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.16.1.3")

                let interfaceIndex = if root.out.ietf.ospfAddressLessIf > 0 {
                  "ifEntry." + root.out.ietf.ospfAddressLessIf.string()
                } else {
                  root.out.ietf.ospfIfIpAddress
                }
                
                root.out.object.name = "OSPF-TRAP-MIB::ospfIfEntry"
                root.out.object.index = root.out.ietf.ospfIfIpAddress + "." + root.out.ietf.ospfAddressLessIf.string()
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId + ", interface: " + $interfaceIndex + ", packet source: " + root.out.ietf.ospfPacketSrc

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfIfAuthFailure"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfIfAuthFailure"
                root.out.event.category.name = "OSPF interface ingress packet state"
                root.out.event.message = "OSPF interface ingress " + root.out.ietf.ospfPacketType + " packet authentication failure: " + root.out.ietf.ospfConfigErrorType
                root.out.event.severity.code = 3
                root.out.event.severity.level = "Error"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              if this.trap.VarBinds.length() > 6 {
                root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
                root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
                }
              if this.trap.VarBinds.length() > 7 {
                root.out.snmptrap.varbind.oid_7 = this.trap.VarBinds.index(7).OID
                root.out.snmptrap.varbind.type_7 = this.trap.VarBinds.index(7).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(7).Type == 4 || this.trap.VarBinds.index(7).Type == 68 {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.string()
                }
              if this.trap.VarBinds.length() > 8 {
                root.out.snmptrap.varbind.oid_8 = this.trap.VarBinds.index(8).OID
                root.out.snmptrap.varbind.type_8 = this.trap.VarBinds.index(8).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(8).Type == 4 || this.trap.VarBinds.index(8).Type == 68 {
                  root.out.snmptrap.varbind.value_8 = this.trap.VarBinds.index(8).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_8 = this.trap.VarBinds.index(8).Value.string()
                }
              }}}}}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfIfAuthFailure"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfIfAuthFailure-unknown"
              root.out.event.category.name = "OSPF interface ingress packet state"
              root.out.event.message = "OSPF interface ingress packet authentication failure - UNEXPECTED VARBINDS for ospfIfAuthFailure trap!"
              root.out.event.severity.code = 3
              root.out.event.severity.level = "Error"

  - check: this.trap.SpecificTrap == 7
    # ospfVirtIfAuthFailure
    #
    # An ospfVirtIfAuthFailure trap signifies that a packet has been received on a virtual interface from a router
    # whose authentication key or authentication type conflicts with this router's authentication key or
    # authentication type.
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfVirtIfAreaId (IpAddress) - The transit area that the virtual link traverses. By definition, this is not
    #   0.0.0.0.
    # ospfVirtIfNeighbor (IpAddress) - The Router ID of the virtual neighbor.
    # ospfConfigErrorType (INTEGER) - Potential types of configuration conflicts. Used by the ospfConfigError and
    #   ospfConfigVirtError traps. When the last value of a trap using this object is needed, but no traps of that
    #   type have been sent, this value pertaining to this object should be returned as noError.
    # ospfPacketType (INTEGER) - OSPF packet types. When the last value of a trap using this object is needed, but no
    #   traps of that type have been sent, this value pertaining to this object should be returned as nullPacket.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 4 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.9.1.1") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.9.1.2") {
            if this.trap.VarBinds.index(3).OID.has_prefix(".1.3.6.1.2.1.14.16.1.2") {
            if this.trap.VarBinds.index(4).OID.has_prefix(".1.3.6.1.2.1.14.16.1.3") {
              meta varbinds_ok = true
          }}}}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                meta ospfConfigErrorType = this.trap.VarBinds.index(3).Value.catch(0)

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfVirtIfAreaId = this.trap.VarBinds.index(1).Value
                if root.out.ietf.ospfVirtIfAreaId.type() == "number" {
                  root.out.ietf.ospfVirtIfAreaId = root.out.ietf.ospfVirtIfAreaId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfVirtIfNeighbor = this.trap.VarBinds.index(2).Value
                if root.out.ietf.ospfVirtIfNeighbor.type() == "number" {
                  root.out.ietf.ospfVirtIfNeighbor = root.out.ietf.ospfVirtIfNeighbor.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfConfigErrorType = this.trap.VarBinds.index(3).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.16.1.2")
                root.out.ietf.ospfPacketType = this.trap.VarBinds.index(4).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.16.1.3")

                root.out.object.name = "OSPF-TRAP-MIB::ospfVirtIfEntry"
                root.out.object.index = root.out.ietf.ospfVirtIfAreaId + "." + root.out.ietf.ospfVirtIfNeighbor
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId + ", area: " + root.out.ietf.ospfVirtIfAreaId + ", neighbor: " + root.out.ietf.ospfVirtIfNeighbor

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfAuthFailure"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfAuthFailure"
                root.out.event.category.name = "OSPF virtual interface ingress packet state"
                root.out.event.message = "OSPF virtual interface ingress " + root.out.ietf.ospfPacketType + " packet authentication failure: " + root.out.ietf.ospfConfigErrorType
                root.out.event.severity.code = 3
                root.out.event.severity.level = "Error"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              if this.trap.VarBinds.length() > 6 {
                root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
                root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
                }
              if this.trap.VarBinds.length() > 7 {
                root.out.snmptrap.varbind.oid_7 = this.trap.VarBinds.index(7).OID
                root.out.snmptrap.varbind.type_7 = this.trap.VarBinds.index(7).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(7).Type == 4 || this.trap.VarBinds.index(7).Type == 68 {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.string()
                }
              }}}}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfAuthFailure"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfAuthFailure-unknown"
              root.out.event.category.name = "OSPF virtual interface ingress packet state"
              root.out.event.message = "OSPF virtual interface ingress packet authentication failure - UNEXPECTED VARBINDS for ospfVirtIfAuthFailure trap!"
              root.out.event.severity.code = 3
              root.out.event.severity.level = "Error"

  - check: this.trap.SpecificTrap == 8
    # ospfIfRxBadPacket
    #
    # An ospfIfRxBadPacket trap signifies that an OSPF packet has been received on a non-virtual interface that cannot
    # be parsed.
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfIfIpAddress (IpAddress) - The IP address of this OSPF interface.
    # ospfAddressLessIf (Integer32) - For the purpose of easing the instancing of addressed and addressless
    #   interfaces; this variable takes the value 0 on interfaces with IP addresses and the corresponding value of
    #   ifIndex for interfaces having no IP address.
    # ospfPacketSrc (IpAddress) - The IP address of an inbound packet that cannot be identified by a neighbor
    #   instance. When the last value of a trap using this object is needed, but no traps of that type have been sent,
    #   this value pertaining to this object should be returned as 0.0.0.0.
    # ospfPacketType (INTEGER) - OSPF packet types. When the last value of a trap using this object is needed, but no
    #   traps of that type have been sent, this value pertaining to this object should be returned as nullPacket.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 4 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.7.1.1") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.7.1.2") {
            if this.trap.VarBinds.index(3).OID.has_prefix(".1.3.6.1.2.1.14.16.1.4") {
            if this.trap.VarBinds.index(4).OID.has_prefix(".1.3.6.1.2.1.14.16.1.3") {
              meta varbinds_ok = true
          }}}}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfIfIpAddress = this.trap.VarBinds.index(1).Value
                if root.out.ietf.ospfIfIpAddress.type() == "number" {
                  root.out.ietf.ospfIfIpAddress = root.out.ietf.ospfIfIpAddress.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfAddressLessIf = this.trap.VarBinds.index(2).Value
                root.out.ietf.ospfPacketSrc = this.trap.VarBinds.index(3).Value
                if root.out.ietf.ospfPacketSrc.type() == "number" {
                  root.out.ietf.ospfPacketSrc = root.out.ietf.ospfPacketSrc.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfPacketType = this.trap.VarBinds.index(4).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.16.1.3")

                let interfaceIndex = if root.out.ietf.ospfAddressLessIf > 0 {
                  "ifEntry." + root.out.ietf.ospfAddressLessIf.string()
                } else {
                  root.out.ietf.ospfIfIpAddress
                }
                
                root.out.object.name = "OSPF-TRAP-MIB::ospfIfEntry"
                root.out.object.index = root.out.ietf.ospfIfIpAddress + "." + root.out.ietf.ospfAddressLessIf.string()
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId + ", interface: " + $interfaceIndex + ", packet source: " + root.out.ietf.ospfPacketSrc

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfIfRxBadPacket"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfIfRxBadPacket"
                root.out.event.category.name = "OSPF interface ingress packet state"
                root.out.event.message = "OSPF interface bad ingress " + root.out.ietf.ospfPacketType + " packet"
                root.out.event.severity.code = 3
                root.out.event.severity.level = "Error"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              if this.trap.VarBinds.length() > 6 {
                root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
                root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
                }
              if this.trap.VarBinds.length() > 7 {
                root.out.snmptrap.varbind.oid_7 = this.trap.VarBinds.index(7).OID
                root.out.snmptrap.varbind.type_7 = this.trap.VarBinds.index(7).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(7).Type == 4 || this.trap.VarBinds.index(7).Type == 68 {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.string()
                }
              }}}}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfIfRxBadPacket"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfIfRxBadPacket-unknown"
              root.out.event.category.name = "OSPF interface ingress packet state"
              root.out.event.message = "OSPF interface bad ingress packet - UNEXPECTED VARBINDS for ospfIfRxBadPacket trap!"
              root.out.event.severity.code = 3
              root.out.event.severity.level = "Error"

  - check: this.trap.SpecificTrap == 9
    # ospfVirtIfRxBadPacket
    #
    # An ospfVirtIfRxBadPacket trap signifies that an OSPF packet has been received on a virtual interface that cannot
    # be parsed.
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfVirtIfAreaId (IpAddress) - The transit area that the virtual link traverses. By definition, this is not
    #   0.0.0.0.
    # ospfVirtIfNeighbor (IpAddress) - The Router ID of the virtual neighbor.
    # ospfPacketType (INTEGER) - OSPF packet types. When the last value of a trap using this object is needed, but no
    #   traps of that type have been sent, this value pertaining to this object should be returned as nullPacket.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 3 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.9.1.1") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.9.1.2") {
            if this.trap.VarBinds.index(3).OID.has_prefix(".1.3.6.1.2.1.14.16.1.3") {
              meta varbinds_ok = true
          }}}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfVirtIfAreaId = this.trap.VarBinds.index(1).Value
                if root.out.ietf.ospfVirtIfAreaId.type() == "number" {
                  root.out.ietf.ospfVirtIfAreaId = root.out.ietf.ospfVirtIfAreaId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfVirtIfNeighbor = this.trap.VarBinds.index(2).Value
                if root.out.ietf.ospfVirtIfNeighbor.type() == "number" {
                  root.out.ietf.ospfVirtIfNeighbor = root.out.ietf.ospfVirtIfNeighbor.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfPacketType = this.trap.VarBinds.index(3).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.16.1.3")

                root.out.object.name = "OSPF-TRAP-MIB::ospfVirtIfEntry"
                root.out.object.index = root.out.ietf.ospfVirtIfAreaId + "." + root.out.ietf.ospfVirtIfNeighbor
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId + ", area: " + root.out.ietf.ospfVirtIfAreaId + ", neighbor: " + root.out.ietf.ospfVirtIfNeighbor

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfRxBadPacket"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfRxBadPacket"
                root.out.event.category.name = "OSPF virtual interface ingress packet state"
                root.out.event.message = "OSPF virtual interface bad ingress " + root.out.ietf.ospfPacketType + " packet"
                root.out.event.severity.code = 3
                root.out.event.severity.level = "Error"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              if this.trap.VarBinds.length() > 6 {
                root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
                root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
                }
              }}}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfRxBadPacket"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfRxBadPacket-unknown"
              root.out.event.category.name = "OSPF virtual interface ingress packet state"
              root.out.event.message = "OSPF virtual interface bad ingress packet - UNEXPECTED VARBINDS for ospfVirtIfRxBadPacket trap!"
              root.out.event.severity.code = 3
              root.out.event.severity.level = "Error"

  - check: this.trap.SpecificTrap == 10
    # ospfTxRetransmit
    #
    # An ospfTxRetransmit trap signifies than an OSPF packet has been retransmitted on a non-virtual interface. All
    # packets that may be retransmitted are associated with an LSDB entry. The LS type, LS ID, and Router ID are used
    # to identify the LSDB entry.
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfIfIpAddress (IpAddress) - The IP address of this OSPF interface.
    # ospfAddressLessIf (Integer32) - For the purpose of easing the instancing of addressed and addressless
    #   interfaces; this variable takes the value 0 on interfaces with IP addresses and the corresponding value of
    #   ifIndex for interfaces having no IP address.
    # ospfNbrRtrId (IpAddress) - A 32-bit integer (represented as a type IpAddress) uniquely identifying the
    #   neighboring router in the Autonomous System.
    # ospfPacketType (INTEGER) - OSPF packet types. When the last value of a trap using this object is needed, but no
    #   traps of that type have been sent, this value pertaining to this object should be returned as nullPacket.
    # ospfLsdbType (INTEGER) - The type of the link state advertisement. Each link state type has a separate
    #   advertisement format. Note: External link state advertisements are permitted for backward compatibility, but
    #   should be displayed in the ospfAsLsdbTable rather than here.
    # ospfLsdbLsid (IpAddress) - The Link State ID is an LS Type Specific field containing either a Router ID or an IP
    #   address; it identifies the piece of the routing domain that is being described by the advertisement.
    # ospfLsdbRouterId (IpAddress) - The 32-bit number that uniquely identifies the originating router in the
    #   Autonomous System.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 7 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.7.1.1") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.7.1.2") {
            if this.trap.VarBinds.index(3).OID.has_prefix(".1.3.6.1.2.1.14.10.1.3") {
            if this.trap.VarBinds.index(4).OID.has_prefix(".1.3.6.1.2.1.14.16.1.3") {
            if this.trap.VarBinds.index(5).OID.has_prefix(".1.3.6.1.2.1.14.4.1.2") {
            if this.trap.VarBinds.index(6).OID.has_prefix(".1.3.6.1.2.1.14.4.1.3") {
            if this.trap.VarBinds.index(7).OID.has_prefix(".1.3.6.1.2.1.14.4.1.4") {
              meta varbinds_ok = true
          }}}}}}}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfIfIpAddress = this.trap.VarBinds.index(1).Value
                if root.out.ietf.ospfIfIpAddress.type() == "number" {
                  root.out.ietf.ospfIfIpAddress = root.out.ietf.ospfIfIpAddress.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfAddressLessIf = this.trap.VarBinds.index(2).Value
                root.out.ietf.ospfNbrRtrId = this.trap.VarBinds.index(3).Value
                if root.out.ietf.ospfNbrRtrId.type() == "number" {
                  root.out.ietf.ospfNbrRtrId = root.out.ietf.ospfNbrRtrId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfPacketType = this.trap.VarBinds.index(4).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.16.1.3")
                root.out.ietf.ospfLsdbType = this.trap.VarBinds.index(5).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.4.1.2")
                root.out.ietf.ospfLsdbLsid = this.trap.VarBinds.index(6).Value
                if root.out.ietf.ospfLsdbLsid.type() == "number" {
                  root.out.ietf.ospfLsdbLsid = root.out.ietf.ospfLsdbLsid.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfLsdbRouterId = this.trap.VarBinds.index(7).Value
                if root.out.ietf.ospfLsdbRouterId.type() == "number" {
                  root.out.ietf.ospfLsdbRouterId = root.out.ietf.ospfLsdbRouterId.snmp_int_to_ipv4()
                }

                let interfaceIndex = if root.out.ietf.ospfAddressLessIf > 0 {
                  "ifEntry." + root.out.ietf.ospfAddressLessIf.string()
                } else {
                  root.out.ietf.ospfIfIpAddress
                }
                
                root.out.object.name = "OSPF-TRAP-MIB::ospfIfEntry"
                root.out.object.index = root.out.ietf.ospfIfIpAddress + "." + root.out.ietf.ospfAddressLessIf.string()
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId + ", interface: " + $interfaceIndex + ", neighbor: " + root.out.ietf.ospfNbrRtrId

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfTxRetransmit"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfTxRetransmit"
                root.out.event.category.name = "OSPF interface egress packet state"
                root.out.event.message = "OSPF interface egress " + root.out.ietf.ospfPacketType + " packet retransmitted, LS Type: " + root.out.ietf.ospfLsdbType + ", LS ID: " + root.out.ietf.ospfLsdbLsid + ", LS router: " + root.out.ietf.ospfLsdbRouterId
                root.out.event.severity.code = 4
                root.out.event.severity.level = "Warning"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              if this.trap.VarBinds.length() > 6 {
                root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
                root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
                }
              if this.trap.VarBinds.length() > 7 {
                root.out.snmptrap.varbind.oid_7 = this.trap.VarBinds.index(7).OID
                root.out.snmptrap.varbind.type_7 = this.trap.VarBinds.index(7).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(7).Type == 4 || this.trap.VarBinds.index(7).Type == 68 {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.string()
                }
              if this.trap.VarBinds.length() > 8 {
                root.out.snmptrap.varbind.oid_8 = this.trap.VarBinds.index(8).OID
                root.out.snmptrap.varbind.type_8 = this.trap.VarBinds.index(8).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(8).Type == 4 || this.trap.VarBinds.index(8).Type == 68 {
                  root.out.snmptrap.varbind.value_8 = this.trap.VarBinds.index(8).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_8 = this.trap.VarBinds.index(8).Value.string()
                }
              if this.trap.VarBinds.length() > 9 {
                root.out.snmptrap.varbind.oid_9 = this.trap.VarBinds.index(9).OID
                root.out.snmptrap.varbind.type_9 = this.trap.VarBinds.index(9).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(9).Type == 4 || this.trap.VarBinds.index(9).Type == 68 {
                  root.out.snmptrap.varbind.value_9 = this.trap.VarBinds.index(9).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_9 = this.trap.VarBinds.index(9).Value.string()
                }
              if this.trap.VarBinds.length() > 10 {
                root.out.snmptrap.varbind.oid_10 = this.trap.VarBinds.index(10).OID
                root.out.snmptrap.varbind.type_10 = this.trap.VarBinds.index(10).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(10).Type == 4 || this.trap.VarBinds.index(10).Type == 68 {
                  root.out.snmptrap.varbind.value_10 = this.trap.VarBinds.index(10).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_10 = this.trap.VarBinds.index(10).Value.string()
                }
              }}}}}}}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfTxRetransmit"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfTxRetransmit-unknown"
              root.out.event.category.name = "OSPF interface egress packet state"
              root.out.event.message = "OSPF interface egress packet retransmitted - UNEXPECTED VARBINDS for ospfTxRetransmit trap!"
              root.out.event.severity.code = 4
              root.out.event.severity.level = "Warning"

  - check: this.trap.SpecificTrap == 11
    # ospfVirtIfTxRetransmit
    #
    # An ospfVirtIfTxRetransmit trap signifies than an OSPF packet has been retransmitted on a virtual interface. All
    # packets that may be retransmitted are associated with an LSDB entry. The LS type, LS ID, and Router ID are used
    # to identify the LSDB entry.
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfVirtIfAreaId (IpAddress) - The transit area that the virtual link traverses. By definition, this is not
    #   0.0.0.0.
    # ospfVirtIfNeighbor (IpAddress) - The Router ID of the virtual neighbor.
    # ospfPacketType (INTEGER) - OSPF packet types. When the last value of a trap using this object is needed, but no
    #   traps of that type have been sent, this value pertaining to this object should be returned as nullPacket.
    # ospfLsdbType (INTEGER) - The type of the link state advertisement. Each link state type has a separate
    #   advertisement format. Note: External link state advertisements are permitted for backward compatibility, but
    #   should be displayed in the ospfAsLsdbTable rather than here.
    # ospfLsdbLsid (IpAddress) - The Link State ID is an LS Type Specific field containing either a Router ID or an IP
    #   address; it identifies the piece of the routing domain that is being described by the advertisement.
    # ospfLsdbRouterId (IpAddress) - The 32-bit number that uniquely identifies the originating router in the
    #   Autonomous System.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 6 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.9.1.1") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.9.1.2") {
            if this.trap.VarBinds.index(3).OID.has_prefix(".1.3.6.1.2.1.14.16.1.3") {
            if this.trap.VarBinds.index(4).OID.has_prefix(".1.3.6.1.2.1.14.4.1.2") {
            if this.trap.VarBinds.index(5).OID.has_prefix(".1.3.6.1.2.1.14.4.1.3") {
            if this.trap.VarBinds.index(6).OID.has_prefix(".1.3.6.1.2.1.14.4.1.4") {
              meta varbinds_ok = true
          }}}}}}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfVirtIfAreaId = this.trap.VarBinds.index(1).Value
                if root.out.ietf.ospfVirtIfAreaId.type() == "number" {
                  root.out.ietf.ospfVirtIfAreaId = root.out.ietf.ospfVirtIfAreaId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfVirtIfNeighbor = this.trap.VarBinds.index(2).Value
                if root.out.ietf.ospfVirtIfNeighbor.type() == "number" {
                  root.out.ietf.ospfVirtIfNeighbor = root.out.ietf.ospfVirtIfNeighbor.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfPacketType = this.trap.VarBinds.index(3).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.16.1.3")
                root.out.ietf.ospfLsdbType = this.trap.VarBinds.index(4).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.4.1.2")
                root.out.ietf.ospfLsdbLsid = this.trap.VarBinds.index(5).Value
                if root.out.ietf.ospfLsdbLsid.type() == "number" {
                  root.out.ietf.ospfLsdbLsid = root.out.ietf.ospfLsdbLsid.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfLsdbRouterId = this.trap.VarBinds.index(6).Value
                if root.out.ietf.ospfLsdbRouterId.type() == "number" {
                  root.out.ietf.ospfLsdbRouterId = root.out.ietf.ospfLsdbRouterId.snmp_int_to_ipv4()
                }

                root.out.object.name = "OSPF-TRAP-MIB::ospfVirtIfEntry"
                root.out.object.index = root.out.ietf.ospfVirtIfAreaId + "." + root.out.ietf.ospfVirtIfNeighbor
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId + ", area: " + root.out.ietf.ospfVirtIfAreaId + ", neighbor: " + root.out.ietf.ospfVirtIfNeighbor

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfTxRetransmit"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfTxRetransmit"
                root.out.event.category.name = "OSPF virtual interface egress packet state"
                root.out.event.message = "OSPF virtual interface egress " + root.out.ietf.ospfPacketType + " packet retransmitted, LS Type: " + root.out.ietf.ospfLsdbType + ", LS ID: " + root.out.ietf.ospfLsdbLsid + ", LS router: " + root.out.ietf.ospfLsdbRouterId
                root.out.event.severity.code = 4
                root.out.event.severity.level = "Warning"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              if this.trap.VarBinds.length() > 6 {
                root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
                root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
                }
              if this.trap.VarBinds.length() > 7 {
                root.out.snmptrap.varbind.oid_7 = this.trap.VarBinds.index(7).OID
                root.out.snmptrap.varbind.type_7 = this.trap.VarBinds.index(7).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(7).Type == 4 || this.trap.VarBinds.index(7).Type == 68 {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.string()
                }
              if this.trap.VarBinds.length() > 8 {
                root.out.snmptrap.varbind.oid_8 = this.trap.VarBinds.index(8).OID
                root.out.snmptrap.varbind.type_8 = this.trap.VarBinds.index(8).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(8).Type == 4 || this.trap.VarBinds.index(8).Type == 68 {
                  root.out.snmptrap.varbind.value_8 = this.trap.VarBinds.index(8).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_8 = this.trap.VarBinds.index(8).Value.string()
                }
              if this.trap.VarBinds.length() > 9 {
                root.out.snmptrap.varbind.oid_9 = this.trap.VarBinds.index(9).OID
                root.out.snmptrap.varbind.type_9 = this.trap.VarBinds.index(9).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(9).Type == 4 || this.trap.VarBinds.index(9).Type == 68 {
                  root.out.snmptrap.varbind.value_9 = this.trap.VarBinds.index(9).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_9 = this.trap.VarBinds.index(9).Value.string()
                }
              }}}}}}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfTxRetransmit"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtIfTxRetransmit-unknown"
              root.out.event.category.name = "OSPF virtual interface egress packet state"
              root.out.event.message = "OSPF virtual interface egress packet retransmitted - UNEXPECTED VARBINDS for ospfVirtIfTxRetransmit trap!"
              root.out.event.severity.code = 4
              root.out.event.severity.level = "Warning"

  - check: this.trap.SpecificTrap == 12
    # ospfOriginateLsa
    #
    # An ospfOriginateLsa trap signifies that a new LSA has been originated by this router. This trap should not be
    # invoked for simple refreshes of LSAs (which happens every 30 minutes), but instead will only be invoked when an
    # LSA is (re)originated due to a topology change. Additionally, this trap does not include LSAs that are being
    # flushed because they have reached MaxAge.
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfLsdbAreaId (IpAddress) - The 32-bit identifier of the area from which the LSA was received.
    # ospfLsdbType (INTEGER) - The type of the link state advertisement. Each link state type has a separate
    #   advertisement format. Note: External link state advertisements are permitted for backward compatibility, but
    #   should be displayed in the ospfAsLsdbTable rather than here.
    # ospfLsdbLsid (IpAddress) - The Link State ID is an LS Type Specific field containing either a Router ID or an IP
    #   address; it identifies the piece of the routing domain that is being described by the advertisement.
    # ospfLsdbRouterId (IpAddress) - The 32-bit number that uniquely identifies the originating router in the
    #   Autonomous System.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 4 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.4.1.1") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.4.1.2") {
            if this.trap.VarBinds.index(3).OID.has_prefix(".1.3.6.1.2.1.14.4.1.3") {
            if this.trap.VarBinds.index(4).OID.has_prefix(".1.3.6.1.2.1.14.4.1.4") {
              meta varbinds_ok = true
          }}}}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfLsdbAreaId = this.trap.VarBinds.index(1).Value
                if root.out.ietf.ospfLsdbAreaId.type() == "number" {
                  root.out.ietf.ospfLsdbAreaId = root.out.ietf.ospfLsdbAreaId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfLsdbType = this.trap.VarBinds.index(2).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.4.1.2")
                root.out.ietf.ospfLsdbLsid = this.trap.VarBinds.index(3).Value
                if root.out.ietf.ospfLsdbLsid.type() == "number" {
                  root.out.ietf.ospfLsdbLsid = root.out.ietf.ospfLsdbLsid.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfLsdbRouterId = this.trap.VarBinds.index(4).Value
                if root.out.ietf.ospfLsdbRouterId.type() == "number" {
                  root.out.ietf.ospfLsdbRouterId = root.out.ietf.ospfLsdbRouterId.snmp_int_to_ipv4()
                }

                root.out.object.name = "OSPF-TRAP-MIB::ospfLsdbEntry"
                root.out.object.index = root.out.ietf.ospfLsdbAreaId + "." + this.trap.VarBinds.index(2).Value.string() + "." + root.out.ietf.ospfLsdbLsid + "." + root.out.ietf.ospfLsdbRouterId
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId + ", area: " + root.out.ietf.ospfLsdbAreaId + ", LS ID: " + root.out.ietf.ospfLsdbLsid + ", LS router: " + root.out.ietf.ospfLsdbRouterId

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfOriginateLsa"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfOriginateLsa"
                root.out.event.category.name = "OSPF LSA state"
                root.out.event.message = "OSPF " + root.out.ietf.ospfLsdbType + " LSA originated"
                root.out.event.severity.code = 6
                root.out.event.severity.level = "Informational"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              if this.trap.VarBinds.length() > 6 {
                root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
                root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
                }
              if this.trap.VarBinds.length() > 7 {
                root.out.snmptrap.varbind.oid_7 = this.trap.VarBinds.index(7).OID
                root.out.snmptrap.varbind.type_7 = this.trap.VarBinds.index(7).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(7).Type == 4 || this.trap.VarBinds.index(7).Type == 68 {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.string()
                }
              }}}}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfOriginateLsa"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfOriginateLsa-unknown"
              root.out.event.category.name = "OSPF LSA state"
              root.out.event.message = "OSPF LSA originated - UNEXPECTED VARBINDS for ospfOriginateLsa trap!"
              root.out.event.severity.code = 4
              root.out.event.severity.level = "Warning"

  - check: this.trap.SpecificTrap == 13
    # ospfMaxAgeLsa
    #
    # An ospfMaxAgeLsa trap signifies that one of the LSAs in the router's link state database has aged to MaxAge.
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfLsdbAreaId (IpAddress) - The 32-bit identifier of the area from which the LSA was received.
    # ospfLsdbType (INTEGER) - The type of the link state advertisement. Each link state type has a separate
    #   advertisement format. Note: External link state advertisements are permitted for backward compatibility, but
    #   should be displayed in the ospfAsLsdbTable rather than here.
    # ospfLsdbLsid (IpAddress) - The Link State ID is an LS Type Specific field containing either a Router ID or an IP
    #   address; it identifies the piece of the routing domain that is being described by the advertisement.
    # ospfLsdbRouterId (IpAddress) - The 32-bit number that uniquely identifies the originating router in the
    #   Autonomous System.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 4 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.4.1.1") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.4.1.2") {
            if this.trap.VarBinds.index(3).OID.has_prefix(".1.3.6.1.2.1.14.4.1.3") {
            if this.trap.VarBinds.index(4).OID.has_prefix(".1.3.6.1.2.1.14.4.1.4") {
              meta varbinds_ok = true
          }}}}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfLsdbAreaId = this.trap.VarBinds.index(1).Value
                if root.out.ietf.ospfLsdbAreaId.type() == "number" {
                  root.out.ietf.ospfLsdbAreaId = root.out.ietf.ospfLsdbAreaId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfLsdbType = this.trap.VarBinds.index(2).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.4.1.2")
                root.out.ietf.ospfLsdbLsid = this.trap.VarBinds.index(3).Value
                if root.out.ietf.ospfLsdbLsid.type() == "number" {
                  root.out.ietf.ospfLsdbLsid = root.out.ietf.ospfLsdbLsid.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfLsdbRouterId = this.trap.VarBinds.index(4).Value
                if root.out.ietf.ospfLsdbRouterId.type() == "number" {
                  root.out.ietf.ospfLsdbRouterId = root.out.ietf.ospfLsdbRouterId.snmp_int_to_ipv4()
                }

                root.out.object.name = "OSPF-TRAP-MIB::ospfLsdbEntry"
                root.out.object.index = root.out.ietf.ospfLsdbAreaId + "." + this.trap.VarBinds.index(2).Value.string() + "." + root.out.ietf.ospfLsdbLsid + "." + root.out.ietf.ospfLsdbRouterId
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId + ", area: " + root.out.ietf.ospfLsdbAreaId + ", LS ID: " + root.out.ietf.ospfLsdbLsid + ", LS router: " + root.out.ietf.ospfLsdbRouterId

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfMaxAgeLsa"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfMaxAgeLsa"
                root.out.event.category.name = "OSPF LSA state"
                root.out.event.message = "OSPF " + root.out.ietf.ospfLsdbType + " LSA aged to MaxAge"
                root.out.event.severity.code = 5
                root.out.event.severity.level = "Notice"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              if this.trap.VarBinds.length() > 6 {
                root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
                root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
                }
              if this.trap.VarBinds.length() > 7 {
                root.out.snmptrap.varbind.oid_7 = this.trap.VarBinds.index(7).OID
                root.out.snmptrap.varbind.type_7 = this.trap.VarBinds.index(7).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(7).Type == 4 || this.trap.VarBinds.index(7).Type == 68 {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.string()
                }
              }}}}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfMaxAgeLsa"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfMaxAgeLsa-unknown"
              root.out.event.category.name = "OSPF LSA state"
              root.out.event.message = "OSPF LSA aged to MaxAge - UNEXPECTED VARBINDS for ospfMaxAgeLsa trap!"
              root.out.event.severity.code = 4
              root.out.event.severity.level = "Warning"

  - check: this.trap.SpecificTrap == 14
    # ospfLsdbOverflow
    #
    # An ospfLsdbOverflow trap signifies that the number of LSAs in the router's link state database has exceeded
    # ospfExtLsdbLimit.
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfExtLsdbLimit (Integer32) - The maximum number of non-default AS-external LSAs entries that can be stored in
    #   the link state database. If the value is -1, then there is no limit. When the number of non-default
    #   AS-external LSAs in a router's link state database reaches ospfExtLsdbLimit, the router enters overflow state.
    #   The router never holds more than ospfExtLsdbLimit non-default AS-external LSAs in its database.
    #   OspfExtLsdbLimit MUST be set identically in all routers attached to the OSPF backbone and/or any regular OSPF
    #   area (i.e., OSPF stub areas and NSSAs are excluded). This object is persistent and when written the entity
    #   SHOULD save the change to non-volatile storage.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 1 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.1.11") {
              meta varbinds_ok = true
          }}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfExtLsdbLimit = this.trap.VarBinds.index(1).Value

                root.out.object.name = "OSPF-TRAP-MIB::ospfGeneralGroup"
                root.out.object.index = "0"
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfLsdbOverflow"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfLsdbOverflow"
                root.out.event.category.name = "OSPF LSDB state"
                root.out.event.message = "OSPF LSDB overflow, limit: " + root.out.ietf.ospfExtLsdbLimit.string()
                root.out.event.severity.code = 2
                root.out.event.severity.level = "Critical"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              }}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfLsdbOverflow"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfLsdbOverflow-unknown"
              root.out.event.category.name = "OSPF LSDB state"
              root.out.event.message = "OSPF LSDB overflow - UNEXPECTED VARBINDS for ospfLsdbOverflow trap!"
              root.out.event.severity.code = 2
              root.out.event.severity.level = "Critical"

  - check: this.trap.SpecificTrap == 15
    # ospfLsdbApproachingOverflow
    #
    # An ospfLsdbApproachingOverflow trap signifies that the number of LSAs in the router's link state database has
    # exceeded ninety percent of ospfExtLsdbLimit.
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfExtLsdbLimit (Integer32) - The maximum number of non-default AS-external LSAs entries that can be stored in
    #   the link state database. If the value is -1, then there is no limit. When the number of non-default
    #   AS-external LSAs in a router's link state database reaches ospfExtLsdbLimit, the router enters overflow state.
    #   The router never holds more than ospfExtLsdbLimit non-default AS-external LSAs in its database.
    #   OspfExtLsdbLimit MUST be set identically in all routers attached to the OSPF backbone and/or any regular OSPF
    #   area (i.e., OSPF stub areas and NSSAs are excluded). This object is persistent and when written the entity
    #   SHOULD save the change to non-volatile storage.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 1 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.1.11") {
              meta varbinds_ok = true
          }}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfExtLsdbLimit = this.trap.VarBinds.index(1).Value

                root.out.object.name = "OSPF-TRAP-MIB::ospfGeneralGroup"
                root.out.object.index = "0"
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfLsdbApproachingOverflow"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfLsdbApproachingOverflow"
                root.out.event.category.name = "OSPF LSDB state"
                root.out.event.message = "OSPF LSDB approaching overflow, exceeds 90% of limit: " + root.out.ietf.ospfExtLsdbLimit.string()
                root.out.event.severity.code = 4
                root.out.event.severity.level = "Warning"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              }}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfLsdbApproachingOverflow"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfLsdbApproachingOverflow-unknown"
              root.out.event.category.name = "OSPF LSDB state"
              root.out.event.message = "OSPF LSDB approaching overflow - UNEXPECTED VARBINDS for ospfLsdbApproachingOverflow trap!"
              root.out.event.severity.code = 4
              root.out.event.severity.level = "Warning"

  - check: this.trap.SpecificTrap == 16
    # ospfIfStateChange
    #
    # An ospfIfStateChange trap signifies that there has been a change in the state of a non-virtual OSPF interface.
    # This trap should be generated when the interface state regresses (e.g., goes from Dr to Down) or progresses to a
    # terminal state (i.e., Point-to-Point, DR Other, Dr, or Backup).
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfIfIpAddress (IpAddress) - The IP address of this OSPF interface.
    # ospfAddressLessIf (Integer32) - For the purpose of easing the instancing of addressed and addressless
    #   interfaces; this variable takes the value 0 on interfaces with IP addresses and the corresponding value of
    #   ifIndex for interfaces having no IP address.
    # ospfIfState (INTEGER) - The OSPF Interface State.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 3 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.7.1.1") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.7.1.2") {
            if this.trap.VarBinds.index(3).OID.has_prefix(".1.3.6.1.2.1.14.7.1.12") {
              meta varbinds_ok = true
          }}}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                meta ospfIfState = this.trap.VarBinds.index(3).Value.catch(0)

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfIfIpAddress = this.trap.VarBinds.index(1).Value
                if root.out.ietf.ospfIfIpAddress.type() == "number" {
                  root.out.ietf.ospfIfIpAddress = root.out.ietf.ospfIfIpAddress.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfAddressLessIf = this.trap.VarBinds.index(2).Value
                root.out.ietf.ospfIfState = this.trap.VarBinds.index(3).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.7.1.12")

                let interfaceIndex = if root.out.ietf.ospfAddressLessIf > 0 {
                  "ifEntry." + root.out.ietf.ospfAddressLessIf.string()
                } else {
                  root.out.ietf.ospfIfIpAddress
                }
                
                root.out.object.name = "OSPF-TRAP-MIB::ospfIfEntry"
                root.out.object.index = root.out.ietf.ospfIfIpAddress + "." + root.out.ietf.ospfAddressLessIf.string()
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId + ", interface: " + $interfaceIndex

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfIfStateChange"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfIfStateChange"
                 root.out.event.category.name = "OSPF interface state"

            - switch:
              - check: metadata("ospfIfState") == 1
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-down"
                      root.out.event.message = "OSPF interface down"
                      root.out.event.severity.code = 3
                      root.out.event.severity.level = "Error"

              - check: metadata("ospfIfState") == 2
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-loopback"
                      root.out.event.message = "OSPF interface loopback"
                      root.out.event.severity.code = 4
                      root.out.event.severity.level = "Warning"

              - check: metadata("ospfIfState") == 3
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-waiting"
                      root.out.event.message = "OSPF interface waiting"
                      root.out.event.severity.code = 5
                      root.out.event.severity.level = "Notice"

              - check: metadata("ospfIfState") == 4
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-pointToPoint"
                      root.out.event.message = "OSPF interface point-to-point"
                      root.out.event.severity.code = 6
                      root.out.event.severity.level = "Informational"

              - check: metadata("ospfIfState") == 5
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-designatedRouter"
                      root.out.event.message = "OSPF interface designated router"
                      root.out.event.severity.code = 6
                      root.out.event.severity.level = "Informational"

              - check: metadata("ospfIfState") == 6
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-backupDesignatedRouter"
                      root.out.event.message = "OSPF interface backup designated router"
                      root.out.event.severity.code = 6
                      root.out.event.severity.level = "Informational"

              - check: metadata("ospfIfState") == 7
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-otherDesignatedRouter"
                      root.out.event.message = "OSPF interface other designated router"
                      root.out.event.severity.code = 6
                      root.out.event.severity.level = "Informational"

              - processors:
                - mapping: |-
                    #!blobl
                    root = this

                    root.out.event.id = root.out.event.id + "-unknown"
                    root.out.event.message = "OSPF interface state unknown"
                    root.out.event.severity.code = 4
                    root.out.event.severity.level = "Warning"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              if this.trap.VarBinds.length() > 6 {
                root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
                root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
                }
              }}}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfIfStateChange"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfIfStateChange-unknown"
              root.out.event.category.name = "OSPF interface state"
              root.out.event.message = "OSPF interface state changed - UNEXPECTED VARBINDS for ospfIfStateChange trap!"
              root.out.event.severity.code = 4
              root.out.event.severity.level = "Warning"

  - check: this.trap.SpecificTrap == 17
    # ospfNssaTranslatorStatusChange
    #
    # An ospfNssaTranslatorStatusChange trap indicates that there has been a change in the router's ability to
    # translate OSPF type-7 LSAs into OSPF type-5 LSAs. This trap should be generated when the translator status
    # transitions from or to any defined status on a per-area basis.
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfAreaId (IpAddress) - A 32-bit integer uniquely identifying an area. Area ID 0.0.0.0 is used for the OSPF
    #   backbone.
    # ospfAreaNssaTranslatorState (INTEGER) - Indicates if and how an NSSA border router is performing NSSA
    #   translation of type-7 LSAs into type-5 LSAs. When this object is set to enabled, the NSSA Border router's
    #   OspfAreaNssaExtTranslatorRole has been set to always. When this object is set to elected, a candidate NSSA
    #   Border router is Translating type-7 LSAs into type-5. When this object is set to disabled, a candidate NSSA
    #   border router is NOT translating type-7 LSAs into type-5.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 2 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.2.1.1") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.2.1.12") {
              meta varbinds_ok = true
          }}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                meta ospfAreaNssaTranslatorState = this.trap.VarBinds.index(2).Value.catch(0)

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfAreaId = this.trap.VarBinds.index(1).Value
                if root.out.ietf.ospfAreaId.type() == "number" {
                  root.out.ietf.ospfAreaId = root.out.ietf.ospfAreaId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfAreaNssaTranslatorState = this.trap.VarBinds.index(2).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.2.1.12")

                root.out.object.name = "OSPF-TRAP-MIB::ospfAreaEntry"
                root.out.object.index = root.out.ietf.ospfAreaId
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId + ", area: " + root.out.ietf.ospfAreaId

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfNssaTranslatorStatusChange"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfNssaTranslatorStatusChange"
                root.out.event.category.name = "OSPF NSSA translator state"

            - switch:
              - check: metadata("ospfAreaNssaTranslatorState") == 1
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-enabled"
                      root.out.event.message = "OSPF NSSA translator enabled"
                      root.out.event.severity.code = 6
                      root.out.event.severity.level = "Informational"

              - check: metadata("ospfAreaNssaTranslatorState") == 2
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-elected"
                      root.out.event.message = "OSPF NSSA translator elected"
                      root.out.event.severity.code = 6
                      root.out.event.severity.level = "Informational"

              - check: metadata("ospfAreaNssaTranslatorState") == 3
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-disabled"
                      root.out.event.message = "OSPF NSSA translator disabled"
                      root.out.event.severity.code = 4
                      root.out.event.severity.level = "Warning"

              - processors:
                - mapping: |-
                    #!blobl
                    root = this

                    root.out.event.id = root.out.event.id + "-unknown"
                    root.out.event.message = "OSPF NSSA translator unknown"
                    root.out.event.severity.code = 4
                    root.out.event.severity.level = "Warning"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              }}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfNssaTranslatorStatusChange"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfNssaTranslatorStatusChange-unknown"
              root.out.event.category.name = "OSPF NSSA translator state"
              root.out.event.message = "OSPF OSPF NSSA translator state changed - UNEXPECTED VARBINDS for ospfNssaTranslatorStatusChange trap!"
              root.out.event.severity.code = 4
              root.out.event.severity.level = "Warning"

  - check: this.trap.SpecificTrap == 18
    # ospfRestartStatusChange
    #
    # An ospfRestartStatusChange trap signifies that there has been a change in the graceful restart state for the
    # router. This trap should be generated when the router restart status changes.
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfRestartStatus (INTEGER) - Current status of OSPF graceful restart.
    # ospfRestartInterval (Integer32) - Configured OSPF graceful restart timeout interval. This object is persistent
    #   and when written the entity SHOULD save the change to non-volatile storage.
    # ospfRestartExitReason (INTEGER) - Describes the outcome of the last attempt at a graceful restart. If the value
    #   is 'none', no restart has yet been attempted. If the value is 'inProgress', a restart attempt is currently
    #   underway.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 3 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.1.21") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.1.19") {
            if this.trap.VarBinds.index(3).OID.has_prefix(".1.3.6.1.2.1.14.1.23") {
              meta varbinds_ok = true
          }}}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                meta ospfRestartStatus = this.trap.VarBinds.index(1).Value.catch(0)

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfRestartStatus = this.trap.VarBinds.index(1).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.1.21")
                root.out.ietf.ospfRestartInterval = this.trap.VarBinds.index(2).Value
                root.out.ietf.ospfRestartExitReason = this.trap.VarBinds.index(3).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.1.23")

                root.out.object.name = "OSPF-TRAP-MIB::ospfGeneralGroup"
                root.out.object.index = "0"
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfRestartStatusChange"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfRestartStatusChange"
                root.out.event.category.name = "OSPF restart state"

            - switch:
              - check: metadata("ospfRestartStatus") == 1
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-notRestarting"
                      root.out.event.message = "OSPF running: " + root.out.ietf.ospfRestartExitReason
                      root.out.event.severity.code = 6
                      root.out.event.severity.level = "Informational"

              - check: metadata("ospfRestartStatus") == 2
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-plannedRestart"
                      root.out.event.message = "OSPF planned restart: " + root.out.ietf.ospfRestartExitReason
                      root.out.event.severity.code = 5
                      root.out.event.severity.level = "Notice"

              - check: metadata("ospfRestartStatus") == 3
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-unplannedRestart"
                      root.out.event.message = "OSPF unplanned restart: " + root.out.ietf.ospfRestartExitReason
                      root.out.event.severity.code = 4
                      root.out.event.severity.level = "Warning"

              - processors:
                - mapping: |-
                    #!blobl
                    root = this

                    root.out.event.id = root.out.event.id + "-unknown"
                    root.out.event.message = "OSPF restart state unknown"
                    root.out.event.severity.code = 4
                    root.out.event.severity.level = "Warning"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              if this.trap.VarBinds.length() > 6 {
                root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
                root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
                }
              }}}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfRestartStatusChange"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfRestartStatusChange-unknown"
              root.out.event.category.name = "OSPF restart state"
              root.out.event.message = "OSPF restart state changed - UNEXPECTED VARBINDS for ospfRestartStatusChange trap!"
              root.out.event.severity.code = 4
              root.out.event.severity.level = "Warning"

  - check: this.trap.SpecificTrap == 19
    # ospfNbrRestartHelperStatusChange
    #
    # An ospfNbrRestartHelperStatusChange trap signifies that there has been a change in the graceful restart helper
    # state for the neighbor. This trap should be generated when the neighbor restart helper status transitions for a
    # neighbor.
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfNbrIpAddr (IpAddress) - The IP address this neighbor is using in its IP source address. Note that, on
    #   addressless links, this will not be 0.0.0.0 but the address of another of the neighbor's interfaces.
    # ospfNbrAddressLessIndex (Integer32) - On an interface having an IP address, zero. On addressless interfaces, the
    #   corresponding value of ifIndex in the Internet Standard MIB. On row creation, this can be derived from the
    #   instance.
    # ospfNbrRtrId (IpAddress) - A 32-bit integer (represented as a type IpAddress) uniquely identifying the
    #   neighboring router in the Autonomous System.
    # ospfNbrRestartHelperStatus (INTEGER) - Indicates whether the router is acting as a graceful restart helper for
    #   the neighbor.
    # ospfNbrRestartHelperAge (Unsigned32) - Remaining time in current OSPF graceful restart interval, if the router
    #   is acting as a restart helper for the neighbor.
    # ospfNbrRestartHelperExitReason (INTEGER) - Describes the outcome of the last attempt at acting as a graceful
    #   restart helper for the neighbor.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 6 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.10.1.1") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.10.1.2") {
            if this.trap.VarBinds.index(3).OID.has_prefix(".1.3.6.1.2.1.14.10.1.3") {
            if this.trap.VarBinds.index(4).OID.has_prefix(".1.3.6.1.2.1.14.10.1.12") {
            if this.trap.VarBinds.index(5).OID.has_prefix(".1.3.6.1.2.1.14.10.1.13") {
            if this.trap.VarBinds.index(6).OID.has_prefix(".1.3.6.1.2.1.14.10.1.14") {
              meta varbinds_ok = true
          }}}}}}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                meta ospfNbrRestartHelperStatus = this.trap.VarBinds.index(4).Value.catch(0)

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfNbrIpAddr = this.trap.VarBinds.index(1).Value
                if root.out.ietf.ospfNbrIpAddr.type() == "number" {
                  root.out.ietf.ospfNbrIpAddr = root.out.ietf.ospfNbrIpAddr.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfNbrAddressLessIndex = this.trap.VarBinds.index(2).Value
                root.out.ietf.ospfNbrRtrId = this.trap.VarBinds.index(3).Value
                if root.out.ietf.ospfNbrRtrId.type() == "number" {
                  root.out.ietf.ospfNbrRtrId = root.out.ietf.ospfNbrRtrId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfNbrRestartHelperStatus = this.trap.VarBinds.index(4).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.10.1.12")
                root.out.ietf.ospfNbrRestartHelperAge = this.trap.VarBinds.index(5).Value
                root.out.ietf.ospfNbrRestartHelperExitReason = this.trap.VarBinds.index(6).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.10.1.14")

                let interfaceIndex = if root.out.ietf.ospfNbrAddressLessIndex > 0 {
                  "ifEntry." + root.out.ietf.ospfNbrAddressLessIndex.string()
                } else {
                  root.out.ietf.ospfNbrIpAddr
                }
                
                root.out.object.name = "OSPF-TRAP-MIB::ospfNbrEntry"
                root.out.object.index = root.out.ietf.ospfNbrIpAddr + "." + root.out.ietf.ospfNbrAddressLessIndex.string()
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId + ", neighbor: " + root.out.ietf.ospfNbrRtrId + ", neighbor interface: " + $interfaceIndex
                
                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfNbrRestartHelperStatusChange"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfNbrRestartHelperStatusChange"
                root.out.event.category.name = "OSPF neighbor graceful restart helper state"

            - switch:
              - check: metadata("ospfNbrRestartHelperStatus") == 1
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-notHelping"
                      root.out.event.message = "OSPF neighbor graceful restart helper not helping: " + root.out.ietf.ospfNbrRestartHelperExitReason
                      root.out.event.severity.code = 4
                      root.out.event.severity.level = "Warning"

              - check: metadata("ospfNbrRestartHelperStatus") == 2
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-helping"
                      root.out.event.message = "OSPF neighbor graceful restart helper helping: " + root.out.ietf.ospfNbrRestartHelperExitReason
                      root.out.event.severity.code = 6
                      root.out.event.severity.level = "Informational"

              - processors:
                - mapping: |-
                    #!blobl
                    root = this

                    root.out.event.id = root.out.event.id + "-unknown"
                    root.out.event.message = "OSPF neighbor graceful restart helper unknown: " + root.out.ietf.ospfNbrRestartHelperExitReason
                    root.out.event.severity.code = 4
                    root.out.event.severity.level = "Warning"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              if this.trap.VarBinds.length() > 6 {
                root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
                root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
                }
              if this.trap.VarBinds.length() > 7 {
                root.out.snmptrap.varbind.oid_7 = this.trap.VarBinds.index(7).OID
                root.out.snmptrap.varbind.type_7 = this.trap.VarBinds.index(7).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(7).Type == 4 || this.trap.VarBinds.index(7).Type == 68 {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.string()
                }
              if this.trap.VarBinds.length() > 8 {
                root.out.snmptrap.varbind.oid_8 = this.trap.VarBinds.index(8).OID
                root.out.snmptrap.varbind.type_8 = this.trap.VarBinds.index(8).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(8).Type == 4 || this.trap.VarBinds.index(8).Type == 68 {
                  root.out.snmptrap.varbind.value_8 = this.trap.VarBinds.index(8).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_8 = this.trap.VarBinds.index(8).Value.string()
                }
              if this.trap.VarBinds.length() > 9 {
                root.out.snmptrap.varbind.oid_9 = this.trap.VarBinds.index(9).OID
                root.out.snmptrap.varbind.type_9 = this.trap.VarBinds.index(9).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(9).Type == 4 || this.trap.VarBinds.index(9).Type == 68 {
                  root.out.snmptrap.varbind.value_9 = this.trap.VarBinds.index(9).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_9 = this.trap.VarBinds.index(9).Value.string()
                }
              }}}}}}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfNbrRestartHelperStatusChange"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfNbrRestartHelperStatusChange-unknown"
              root.out.event.category.name = "OSPF neighbor graceful restart helper state"
              root.out.event.message = "OSPF neighbor graceful restart helper state changed - UNEXPECTED VARBINDS for ospfNbrRestartHelperStatusChange trap!"
              root.out.event.severity.code = 4
              root.out.event.severity.level = "Warning"

  - check: this.trap.SpecificTrap == 20
    # ospfVirtNbrRestartHelperStatusChange
    #
    # An ospfVirtNbrRestartHelperStatusChange trap signifies that there has been a change in the graceful restart
    # helper state for the virtual neighbor. This trap should be generated when the virtual neighbor restart helper
    # status transitions for a virtual neighbor.
    #
    # ospfRouterId (IpAddress) - A 32-bit integer uniquely identifying the router in the Autonomous System. By
    #   convention, to ensure uniqueness, this should default to the value of one of the router's IP interface
    #   addresses.
    # ospfVirtNbrArea (IpAddress) - The Transit Area Identifier.
    # ospfVirtNbrRtrId (IpAddress) - A 32-bit integer uniquely identifying the neighboring router in the Autonomous
    #   System.
    # ospfVirtNbrRestartHelperStatus (INTEGER) - Indicates whether the router is acting as a graceful restart helper
    #   for the neighbor.
    # ospfVirtNbrRestartHelperAge (Unsigned32) - Remaining time in current OSPF graceful restart interval, if the
    #   router is acting as a restart helper for the neighbor.
    # ospfVirtNbrRestartHelperExitReason (INTEGER) - Describes the outcome of the last attempt at acting as a graceful
    #   restart helper for the neighbor.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 5 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.14.1.1") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.14.11.1.1") {
            if this.trap.VarBinds.index(2).OID.has_prefix(".1.3.6.1.2.1.14.11.1.2") {
            if this.trap.VarBinds.index(3).OID.has_prefix(".1.3.6.1.2.1.14.11.1.9") {
            if this.trap.VarBinds.index(4).OID.has_prefix(".1.3.6.1.2.1.14.11.1.10") {
            if this.trap.VarBinds.index(5).OID.has_prefix(".1.3.6.1.2.1.14.11.1.11") {
              meta varbinds_ok = true
          }}}}}}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                meta ospfVirtNbrRestartHelperStatus = this.trap.VarBinds.index(3).Value.catch(0)

                root.out.ietf.ospfRouterId = this.trap.VarBinds.index(0).Value
                if root.out.ietf.ospfRouterId.type() == "number" {
                  root.out.ietf.ospfRouterId = root.out.ietf.ospfRouterId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfVirtNbrArea = this.trap.VarBinds.index(1).Value
                if root.out.ietf.ospfVirtNbrArea.type() == "number" {
                  root.out.ietf.ospfVirtNbrArea = root.out.ietf.ospfVirtNbrArea.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfVirtNbrRtrId = this.trap.VarBinds.index(2).Value
                if root.out.ietf.ospfVirtNbrRtrId.type() == "number" {
                  root.out.ietf.ospfVirtNbrRtrId = root.out.ietf.ospfVirtNbrRtrId.snmp_int_to_ipv4()
                }
                root.out.ietf.ospfVirtNbrRestartHelperStatus = this.trap.VarBinds.index(3).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.11.1.9")
                root.out.ietf.ospfVirtNbrRestartHelperAge = this.trap.VarBinds.index(4).Value
                root.out.ietf.ospfVirtNbrRestartHelperExitReason = this.trap.VarBinds.index(5).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.14.11.1.11")

                root.out.object.name = "OSPF-TRAP-MIB::ospfVirtNbrEntry"
                root.out.object.index = root.out.ietf.ospfVirtNbrArea + "." + root.out.ietf.ospfVirtNbrRtrId
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "router: " + root.out.ietf.ospfRouterId + ", area: " + root.out.ietf.ospfVirtNbrArea + ", neighbor: " + root.out.ietf.ospfVirtNbrRtrId

                root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtNbrRestartHelperStatusChange"
                root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtNbrRestartHelperStatusChange"
                root.out.event.category.name = "OSPF virtual neighbor graceful restart helper state"

            - switch:
              - check: metadata("ospfVirtNbrRestartHelperStatus") == 1
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-notHelping"
                      root.out.event.message = "OSPF virtual neighbor graceful restart helper not helping: " + root.out.ietf.ospfVirtNbrRestartHelperExitReason
                      root.out.event.severity.code = 4
                      root.out.event.severity.level = "Warning"

              - check: metadata("ospfVirtNbrRestartHelperStatus") == 2
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-helping"
                      root.out.event.message = "OSPF virtual neighbor graceful restart helper helping: " + root.out.ietf.ospfVirtNbrRestartHelperExitReason
                      root.out.event.severity.code = 6
                      root.out.event.severity.level = "Informational"

              - processors:
                - mapping: |-
                    #!blobl
                    root = this

                    root.out.event.id = root.out.event.id + "-unknown"
                    root.out.event.message = "OSPF virtual neighbor graceful restart helper unknown: " + root.out.ietf.ospfVirtNbrRestartHelperExitReason
                    root.out.event.severity.code = 4
                    root.out.event.severity.level = "Warning"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              if this.trap.VarBinds.length() > 5 {
                root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
                root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
                }
              if this.trap.VarBinds.length() > 6 {
                root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
                root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
                }
              if this.trap.VarBinds.length() > 7 {
                root.out.snmptrap.varbind.oid_7 = this.trap.VarBinds.index(7).OID
                root.out.snmptrap.varbind.type_7 = this.trap.VarBinds.index(7).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(7).Type == 4 || this.trap.VarBinds.index(7).Type == 68 {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.string()
                }
              if this.trap.VarBinds.length() > 8 {
                root.out.snmptrap.varbind.oid_8 = this.trap.VarBinds.index(8).OID
                root.out.snmptrap.varbind.type_8 = this.trap.VarBinds.index(8).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(8).Type == 4 || this.trap.VarBinds.index(8).Type == 68 {
                  root.out.snmptrap.varbind.value_8 = this.trap.VarBinds.index(8).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_8 = this.trap.VarBinds.index(8).Value.string()
                }
              }}}}}}}}}

              root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtNbrRestartHelperStatusChange"
              root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-ospfVirtNbrRestartHelperStatusChange-unknown"
              root.out.event.category.name = "OSPF virtual neighbor graceful restart helper state"
              root.out.event.message = "OSPF virtual neighbor graceful restart helper state changed - UNEXPECTED VARBINDS for ospfVirtNbrRestartHelperStatusChange trap!"
              root.out.event.severity.code = 4
              root.out.event.severity.level = "Warning"

  - processors:
    - label: default
      mapping: |
        #!blobl
        root = this

        if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
          root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
          root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
            root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
          }
        if this.trap.VarBinds.length() > 1 {
          root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
          root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
            root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
          }
        if this.trap.VarBinds.length() > 2 {
          root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
          root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
            root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
          }
        if this.trap.VarBinds.length() > 3 {
          root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
          root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
            root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
          }
        if this.trap.VarBinds.length() > 4 {
          root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
          root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
            root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
          }
        if this.trap.VarBinds.length() > 5 {
          root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
          root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
            root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
          }
        if this.trap.VarBinds.length() > 6 {
          root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
          root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
            root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
          }
        if this.trap.VarBinds.length() > 7 {
          root.out.snmptrap.varbind.oid_7 = this.trap.VarBinds.index(7).OID
          root.out.snmptrap.varbind.type_7 = this.trap.VarBinds.index(7).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(7).Type == 4 || this.trap.VarBinds.index(7).Type == 68 {
            root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.string()
          }
        if this.trap.VarBinds.length() > 8 {
          root.out.snmptrap.varbind.oid_8 = this.trap.VarBinds.index(8).OID
          root.out.snmptrap.varbind.type_8 = this.trap.VarBinds.index(8).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(8).Type == 4 || this.trap.VarBinds.index(8).Type == 68 {
            root.out.snmptrap.varbind.value_8 = this.trap.VarBinds.index(8).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_8 = this.trap.VarBinds.index(8).Value.string()
          }
        if this.trap.VarBinds.length() > 9 {
          root.out.snmptrap.varbind.oid_9 = this.trap.VarBinds.index(9).OID
          root.out.snmptrap.varbind.type_9 = this.trap.VarBinds.index(9).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(9).Type == 4 || this.trap.VarBinds.index(9).Type == 68 {
            root.out.snmptrap.varbind.value_9 = this.trap.VarBinds.index(9).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_9 = this.trap.VarBinds.index(9).Value.string()
          }
        if this.trap.VarBinds.length() > 10 {
          root.out.snmptrap.varbind.oid_10 = this.trap.VarBinds.index(10).OID
          root.out.snmptrap.varbind.type_10 = this.trap.VarBinds.index(10).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(10).Type == 4 || this.trap.VarBinds.index(10).Type == 68 {
            root.out.snmptrap.varbind.value_10 = this.trap.VarBinds.index(10).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_10 = this.trap.VarBinds.index(10).Value.string()
          }
        if this.trap.VarBinds.length() > 11 {
          root.out.snmptrap.varbind.oid_11 = this.trap.VarBinds.index(11).OID
          root.out.snmptrap.varbind.type_11 = this.trap.VarBinds.index(11).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(11).Type == 4 || this.trap.VarBinds.index(11).Type == 68 {
            root.out.snmptrap.varbind.value_11 = this.trap.VarBinds.index(11).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_11 = this.trap.VarBinds.index(11).Value.string()
          }
        if this.trap.VarBinds.length() > 12 {
          root.out.snmptrap.varbind.oid_12 = this.trap.VarBinds.index(12).OID
          root.out.snmptrap.varbind.type_12 = this.trap.VarBinds.index(12).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(12).Type == 4 || this.trap.VarBinds.index(12).Type == 68 {
            root.out.snmptrap.varbind.value_12 = this.trap.VarBinds.index(12).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_12 = this.trap.VarBinds.index(12).Value.string()
          }
        if this.trap.VarBinds.length() > 13 {
          root.out.snmptrap.varbind.oid_13 = this.trap.VarBinds.index(13).OID
          root.out.snmptrap.varbind.type_13 = this.trap.VarBinds.index(13).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(13).Type == 4 || this.trap.VarBinds.index(13).Type == 68 {
            root.out.snmptrap.varbind.value_13 = this.trap.VarBinds.index(13).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_13 = this.trap.VarBinds.index(13).Value.string()
          }
        if this.trap.VarBinds.length() > 14 {
          root.out.snmptrap.varbind.oid_14 = this.trap.VarBinds.index(14).OID
          root.out.snmptrap.varbind.type_14 = this.trap.VarBinds.index(14).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(14).Type == 4 || this.trap.VarBinds.index(14).Type == 68 {
            root.out.snmptrap.varbind.value_14 = this.trap.VarBinds.index(14).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_14 = this.trap.VarBinds.index(14).Value.string()
          }
        if this.trap.VarBinds.length() > 15 {
          root.out.snmptrap.varbind.oid_15 = this.trap.VarBinds.index(15).OID
          root.out.snmptrap.varbind.type_15 = this.trap.VarBinds.index(15).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(15).Type == 4 || this.trap.VarBinds.index(15).Type == 68 {
            root.out.snmptrap.varbind.value_15 = this.trap.VarBinds.index(15).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_15 = this.trap.VarBinds.index(15).Value
          }
        }}}}}}}}}}}}}}}}

        root.out.event.class.name = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-unknown"
        root.out.event.id = "SNMPTRAP-OSPF-TRAP-MIB-ospfTraps-" + this.trap.SpecificTrap.string()
        root.out.event.category.name = "unknown specific trap"
        root.out.event.message = "unknown specific trap " + this.trap.SpecificTrap.string() + " from IETF OSPF-TRAP-MIB-ospfTraps"
        root.out.event.severity.code = 4
        root.out.event.severity.level = "Warning"
