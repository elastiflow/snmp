- mapping: |-
    #!blobl
    root = this
    root.out.origin.agent.name = "IETF BGP4-MIB"
- switch:
  - check: this.trap.SpecificTrap == 1
    # bgpEstablished
    #
    # The bgpEstablished event is generated when the BGP FSM enters the established state.
    #
    # bgpPeerLastError (OCTET STRING) - The last error code and subcode seen by this peer on this connection. If no
    #   error has occurred, this field is zero.  Otherwise, the first byte of this two byte OCTET STRING contains the
    #   error code, and the second byte contains the subcode.
    # bgpPeerState (INTEGER) - The BGP peer connection state.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 1 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.15.3.1.14") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.15.3.1.2") {
              meta varbinds_ok = true
          }}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                root.out.ietf.bgpPeerLastError = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                root.out.ietf.bgpPeerState = this.trap.VarBinds.index(1).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.15.3.1.2")

                root.out.object.name = "BGP4-MIB::bgpPeerEntry"
                root.out.object.index = this.trap.VarBinds.index(1).OID.snmp_oid_get_index(".1.3.6.1.2.1.15.3.1.2")
                root.out.ietf.bgpPeerRemoteAddr = root.out.object.index
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "peer: " + root.out.ietf.bgpPeerRemoteAddr

                root.out.event.class.name = "SNMPTRAP-BGP4-MIB-bgpTraps-bgpEstablished"
                root.out.event.id = "SNMPTRAP-BGP4-MIB-bgpTraps-bgpEstablished"
                root.out.event.category.name = "BGP peer state"
                root.out.event.message = "BGP peer established"
                root.out.event.severity.code = 6
                root.out.event.severity.level = "Informational"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              }}}}}

              root.out.event.class.name = "SNMPTRAP-BGP4-MIB-bgpTraps-bgpEstablished"
              root.out.event.id = "SNMPTRAP-BGP4-MIB-bgpTraps-bgpEstablished-unknown"
              root.out.event.category.name = "BGP peer state"
              root.out.event.message = "BGP peer established - UNEXPECTED VARBINDS for bgpEstablished trap!"
              root.out.event.severity.code = 5
              root.out.event.severity.level = "Notice"

  - check: this.trap.SpecificTrap == 2
    # bgpBackwardTransition
    #
    # The bgpBackwardTransition event is generated when the BGP FSM moves from a higher numbered state to a lower
    # numbered state.
    #
    # bgpPeerLastError (OCTET STRING) - The last error code and subcode seen by this peer on this connection. If no
    #   error has occurred, this field is zero.  Otherwise, the first byte of this two byte OCTET STRING contains the
    #   error code, and the second byte contains the subcode.
    # bgpPeerState (INTEGER) - The BGP peer connection state.
    processors:
      - mapping: |-
          #!blobl
          root = this

          meta varbinds_ok = false
          if this.trap.VarBinds.length() > 1 {
            if this.trap.VarBinds.index(0).OID.has_prefix(".1.3.6.1.2.1.15.3.1.14") {
            if this.trap.VarBinds.index(1).OID.has_prefix(".1.3.6.1.2.1.15.3.1.2") {
              meta varbinds_ok = true
          }}}

      - switch:
        - check: metadata("varbinds_ok")
          processors:
            - mapping: |-
                #!blobl
                root = this

                meta bgpPeerState = this.trap.VarBinds.index(1).Value

                root.out.ietf.bgpPeerLastError = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                root.out.ietf.bgpPeerState = this.trap.VarBinds.index(1).Value.snmp_int_enum_enrich(".1.3.6.1.2.1.15.3.1.2")

                meta bgpPeerLastError = root.out.ietf.bgpPeerLastError
                
                root.out.object.name = "BGP4-MIB::bgpPeerEntry"
                root.out.object.index = this.trap.VarBinds.index(1).OID.snmp_oid_get_index(".1.3.6.1.2.1.15.3.1.2")
                root.out.ietf.bgpPeerRemoteAddr = root.out.object.index
                root.out.object.entity = this.trap.AgentAddress.string() + "_" + root.out.object.name + "." + root.out.object.index
                root.out.object.label = "peer: " + root.out.ietf.bgpPeerRemoteAddr

                root.out.event.class.name = "SNMPTRAP-BGP4-MIB-bgpTraps-bgpBackwardTransition"
                root.out.event.id = "SNMPTRAP-BGP4-MIB-bgpTraps-bgpBackwardTransition"
                root.out.event.category.name = "BGP peer state"

            - switch:
              - check: metadata("bgpPeerState") == 1
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-idle"
                      root.out.event.message = "BGP peer idle"
                      root.out.event.severity.code = 3
                      root.out.event.severity.level = "Error"

              - check: metadata("bgpPeerState") == 2
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-connect"
                      root.out.event.message = "BGP peer connect"
                      root.out.event.severity.code = 5
                      root.out.event.severity.level = "Notice"

              - check: metadata("bgpPeerState") == 3
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-active"
                      root.out.event.message = "BGP peer active"
                      root.out.event.severity.code = 5
                      root.out.event.severity.level = "Notice"

              - check: metadata("bgpPeerState") == 4
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-opensent"
                      root.out.event.message = "BGP peer open sent"
                      root.out.event.severity.code = 5
                      root.out.event.severity.level = "Notice"

              - check: metadata("bgpPeerState") == 5
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-openconfirm"
                      root.out.event.message = "BGP peer open confirm"
                      root.out.event.severity.code = 5
                      root.out.event.severity.level = "Notice"

              - check: metadata("bgpPeerState") == 6
                processors:
                  - mapping: |-
                      #!blobl
                      root = this

                      root.out.event.id = root.out.event.id + "-established"
                      root.out.event.message = "BGP peer established"
                      root.out.event.severity.code = 6
                      root.out.event.severity.level = "Informational"

              - processors:
                - mapping: |-
                    #!blobl
                    root = this

                    root.out.event.id = root.out.event.id + "-unknown"
                    root.out.event.message = "BGP peer state unknown"
                    root.out.event.severity.code = 4
                    root.out.event.severity.level = "Warning"

            - switch:
              - check: metadata("bgpPeerLastError") == "0000"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", No Error"
              - check: metadata("bgpPeerLastError") == "0100"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Message Header Error - Unspecific"
              - check: metadata("bgpPeerLastError") == "0101"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Message Header Error - Connection Not Synchronized"
              - check: metadata("bgpPeerLastError") == "0102"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Message Header Error - Bad Message Length"
              - check: metadata("bgpPeerLastError") == "0103"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Message Header Error - Bad Message Type"
              - check: metadata("bgpPeerLastError") == "0200"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", OPEN Message Error - Unspecific"
              - check: metadata("bgpPeerLastError") == "0201"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", OPEN Message Error - Unsupported Version Number"
              - check: metadata("bgpPeerLastError") == "0202"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", OPEN Message Error - Bad Peer AS"
              - check: metadata("bgpPeerLastError") == "0203"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", OPEN Message Error - Bad BGP Identifier"
              - check: metadata("bgpPeerLastError") == "0204"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", OPEN Message Error - Unsupported Optional Parameter"
              - check: metadata("bgpPeerLastError") == "0206"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", OPEN Message Error - Unacceptable Hold Time"
              - check: metadata("bgpPeerLastError") == "0207"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", OPEN Message Error - Unsupported Capability"
              - check: metadata("bgpPeerLastError") == "020b"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", OPEN Message Error - Role Mismatch"
              - check: metadata("bgpPeerLastError") == "0300"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", UPDATE Message Error - Unspecific"
              - check: metadata("bgpPeerLastError") == "0301"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", UPDATE Message Error - Malformed Attribute List"
              - check: metadata("bgpPeerLastError") == "0302"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", UPDATE Message Error - Unrecognized Well-known Attribute"
              - check: metadata("bgpPeerLastError") == "0303"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", UPDATE Message Error - Missing Well-known Attribute"
              - check: metadata("bgpPeerLastError") == "0304"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", UPDATE Message Error - Attribute Flags Error"
              - check: metadata("bgpPeerLastError") == "0305"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", UPDATE Message Error - Attribute Length Error"
              - check: metadata("bgpPeerLastError") == "0306"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", UPDATE Message Error - Invalid ORIGIN Attribute"
              - check: metadata("bgpPeerLastError") == "0308"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", UPDATE Message Error - Invalid NEXT_HOP Attribute"
              - check: metadata("bgpPeerLastError") == "0309"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", UPDATE Message Error - Optional Attribute Error"
              - check: metadata("bgpPeerLastError") == "030a"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", UPDATE Message Error - Invalid Network Field"
              - check: metadata("bgpPeerLastError") == "030b"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", UPDATE Message Error - Malformed AS_PATH"
              - check: metadata("bgpPeerLastError") == "0400"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Hold Timer Expired"
              - check: metadata("bgpPeerLastError") == "0500"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Finite State Machine Error"
              - check: metadata("bgpPeerLastError") == "0501"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Finite State Machine Error - Receive Unexpected Message in OpenSent State"
              - check: metadata("bgpPeerLastError") == "0502"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Finite State Machine Error - Receive Unexpected Message in OpenConfirm State"
              - check: metadata("bgpPeerLastError") == "0503"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Finite State Machine Error - Receive Unexpected Message in Established State"
              - check: metadata("bgpPeerLastError") == "0600"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Cease"
              - check: metadata("bgpPeerLastError") == "0601"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Cease - Maximum Number of Prefixes Reached"
              - check: metadata("bgpPeerLastError") == "0602"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Cease - Administrative Shutdown"
              - check: metadata("bgpPeerLastError") == "0603"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Cease - Peer De-configured"
              - check: metadata("bgpPeerLastError") == "0604"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Cease - Administrative Reset"
              - check: metadata("bgpPeerLastError") == "0605"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Cease - Connection Rejected"
              - check: metadata("bgpPeerLastError") == "0606"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Cease - Other Configuration Change"
              - check: metadata("bgpPeerLastError") == "0607"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Cease - Connection Collision Resolution"
              - check: metadata("bgpPeerLastError") == "0608"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Cease - Out of Resources"
              - check: metadata("bgpPeerLastError") == "0609"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Cease - Hard Reset"
              - check: metadata("bgpPeerLastError") == "060a"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Cease - BFD Down"
              - check: metadata("bgpPeerLastError") == "0700"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", ROUTE-REFRESH Message Error"
              - check: metadata("bgpPeerLastError") == "0701"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", ROUTE-REFRESH Message Error - Invalid Message Length"
              - check: metadata("bgpPeerLastError") == "0800"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Send Hold Timer Expired"
              - check: metadata("bgpPeerLastError") == "0900"
                processors:
                  - mapping: |-
                      #!blobl
                      root = this
                      root.out.event.message = root.out.event.message + ", Loss of LSDB Synchronization"

            - mapping: |-
                #!blobl
                root = this

                root.out.event.message = if root.out.exists("object.label") {
                  root.out.event.message + "  [ " + root.out.object.label + " ]"
                }

        - processors:
          - mapping: |-
              #!blobl
              root = this

              if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
                root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
                root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
                }
              if this.trap.VarBinds.length() > 1 {
                root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
                root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
                }
              if this.trap.VarBinds.length() > 2 {
                root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
                root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
                }
              if this.trap.VarBinds.length() > 3 {
                root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
                root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
                }
              if this.trap.VarBinds.length() > 4 {
                root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
                root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
                if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
                } else {
                  root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
                }
              }}}}}

              root.out.event.class.name = "SNMPTRAP-BGP4-MIB-bgpTraps-bgpBackwardTransition"
              root.out.event.id = "SNMPTRAP-BGP4-MIB-bgpTraps-bgpBackwardTransition-unknown"
              root.out.event.category.name = "BGP peer state"
              root.out.event.message = "BGP peer backward transition - UNEXPECTED VARBINDS for bgpBackwardTransition trap!"
              root.out.event.severity.code = 3
              root.out.event.severity.level = "Error"

  - processors:
    - label: default
      mapping: |
        #!blobl
        root = this

        if this.trap.exists("VarBinds") && this.trap.VarBinds.length() > 0 {
          root.out.snmptrap.varbind.oid_0 = this.trap.VarBinds.index(0).OID
          root.out.snmptrap.varbind.type_0 = this.trap.VarBinds.index(0).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(0).Type == 4 || this.trap.VarBinds.index(0).Type == 68 {
            root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_0 = this.trap.VarBinds.index(0).Value.string()
          }
        if this.trap.VarBinds.length() > 1 {
          root.out.snmptrap.varbind.oid_1 = this.trap.VarBinds.index(1).OID
          root.out.snmptrap.varbind.type_1 = this.trap.VarBinds.index(1).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(1).Type == 4 || this.trap.VarBinds.index(1).Type == 68 {
            root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_1 = this.trap.VarBinds.index(1).Value.string()
          }
        if this.trap.VarBinds.length() > 2 {
          root.out.snmptrap.varbind.oid_2 = this.trap.VarBinds.index(2).OID
          root.out.snmptrap.varbind.type_2 = this.trap.VarBinds.index(2).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(2).Type == 4 || this.trap.VarBinds.index(2).Type == 68 {
            root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_2 = this.trap.VarBinds.index(2).Value.string()
          }
        if this.trap.VarBinds.length() > 3 {
          root.out.snmptrap.varbind.oid_3 = this.trap.VarBinds.index(3).OID
          root.out.snmptrap.varbind.type_3 = this.trap.VarBinds.index(3).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(3).Type == 4 || this.trap.VarBinds.index(3).Type == 68 {
            root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_3 = this.trap.VarBinds.index(3).Value.string()
          }
        if this.trap.VarBinds.length() > 4 {
          root.out.snmptrap.varbind.oid_4 = this.trap.VarBinds.index(4).OID
          root.out.snmptrap.varbind.type_4 = this.trap.VarBinds.index(4).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(4).Type == 4 || this.trap.VarBinds.index(4).Type == 68 {
            root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_4 = this.trap.VarBinds.index(4).Value.string()
          }
        if this.trap.VarBinds.length() > 5 {
          root.out.snmptrap.varbind.oid_5 = this.trap.VarBinds.index(5).OID
          root.out.snmptrap.varbind.type_5 = this.trap.VarBinds.index(5).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(5).Type == 4 || this.trap.VarBinds.index(5).Type == 68 {
            root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_5 = this.trap.VarBinds.index(5).Value.string()
          }
        if this.trap.VarBinds.length() > 6 {
          root.out.snmptrap.varbind.oid_6 = this.trap.VarBinds.index(6).OID
          root.out.snmptrap.varbind.type_6 = this.trap.VarBinds.index(6).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(6).Type == 4 || this.trap.VarBinds.index(6).Type == 68 {
            root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_6 = this.trap.VarBinds.index(6).Value.string()
          }
        if this.trap.VarBinds.length() > 7 {
          root.out.snmptrap.varbind.oid_7 = this.trap.VarBinds.index(7).OID
          root.out.snmptrap.varbind.type_7 = this.trap.VarBinds.index(7).Type.snmp_int_enum_enrich(".1_SnmpTypes")
          if this.trap.VarBinds.index(7).Type == 4 || this.trap.VarBinds.index(7).Type == 68 {
            root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.snmp_octet_string()
          } else {
            root.out.snmptrap.varbind.value_7 = this.trap.VarBinds.index(7).Value.string()
          }
        }}}}}}}}

        root.out.event.class.name = "SNMPTRAP-BGP4-MIB-bgpTraps-unknown"
        root.out.event.id = "SNMPTRAP-BGP4-MIB-bgpTraps-" + this.trap.SpecificTrap.string()
        root.out.event.category.name = "unknown specific trap"
        root.out.event.message = "unknown specific trap " + this.trap.SpecificTrap.string() + " from IETF BGP4-MIB-bgpTraps"
        root.out.event.severity.code = 4
        root.out.event.severity.level = "Warning"
